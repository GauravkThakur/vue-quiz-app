[
  {
    "question": "What is the purpose of the `v-for` directive in Vue.js?",
    "options": [
      "To conditionally render elements",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To loop through an array and render a list of elements"
  },
  {
    "question": "Which modifier is not supported on v-model?",
    "options": ["v-model.lazy", "v-model.string", "v-model.number", "v-model.trim"],
    "correctAnswer": "v-model.string"
  },
  {
    "question": "Which inbuilt directive is not a conditional directive?",
    "options": ["v-model", "v-if", "v-show", "v-else"],
    "correctAnswer": "v-model"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `ref`"
  },
  {
    "question": "How do you define a computed property in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `computed`"
  },
  {
    "question": "How do you watch a reactive property in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `watch`"
  },
  {
    "question": "How do you bind a class dynamically in Vue.js using the Composition API?",
    "options": ["Using `:class`", "Using `v-if`", "Using `v-for`"],
    "correctAnswer": "Using `:class`"
  },
  {
    "question": "To bind a class `newClass` dynamically when `someCondition` is true, which option is incorrect?",
    "codeSnippet": "<div class=\"oldClass\">Some Div</div>",
    "options": [
      "<div class=\"oldClass\" :class=\"{ newClass: someCondition }\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"someCondition ? 'newClass': ''\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"['newClass']\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"['someCondition ? 'newClass': '']\">Some Div</div>"
    ],
    "correctAnswer": "<div class=\"oldClass\" :class=\"['newClass']\">Some Div</div>"
  },
  {
    "question": "How do you bind multiple classes conditionally in Vue.js using the Composition API?",
    "options": [
      "Using `v-bind:class`",
      "Using `:class` with an array",
      "Using `v-if`",
      "Using `v-for`"
    ],
    "correctAnswer": "Using `:class` with an array"
  },
  {
    "question": "How do you bind inline styles dynamically in Vue.js using the Composition API?",
    "options": ["Using `:style`", "Using `v-if`", "Using `v-for`"],
    "correctAnswer": "Using `:style`"
  },
  {
    "question": "How do you conditionally render an element in Vue.js using the Composition API?",
    "options": ["Using `v-show`", "Using `v-if`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-if`"
  },
  {
    "question": "How do you toggle the visibility of an element in Vue.js with the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-show`"
  },
  {
    "question": "What is the purpose of the provide() method?",
    "options": [
      "To make data locally available to a specific parent component",
      "To make data available to other components",
      "To keep methods local to a single component",
      "To make a strict interface of data shared between components"
    ],
    "correctAnswer": "To make data available to other components"
  },
  {
    "question": "How do you use `v-else` for conditional rendering in Vue.js with the Composition API?",
    "options": [
      "Using `v-if` and `v-else`",
      "Using `v-show` and `v-else`",
      "Using `v-for` and `v-else`",
      "Using `v-bind` and `v-else`"
    ],
    "correctAnswer": "Using `v-if` and `v-else`"
  },
  {
    "question": "How do you render a list of items in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-for`"
  },
  {
    "question": "How do you render a list of items with an index in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for` with an index", "Using `v-bind`"],
    "correctAnswer": "Using `v-for` with an index"
  },
  {
    "question": "How do you render a list of items with a template in Vue.js using the Composition API?",
    "options": [
      "Using `v-if`",
      "Using `v-show`",
      "Using `v-for` with a template",
      "Using `v-bind`"
    ],
    "correctAnswer": "Using `v-for` with a template"
  },
  {
    "question": "How do you handle a click event in Vue.js using the Composition API?",
    "options": ["Using `@click`", "Using `v-bind:click`", "Using `v-if:click`"],
    "correctAnswer": "Using `@click`"
  },
  {
    "question": "How do you handle an input event in Vue.js using the Composition API?",
    "options": ["Using `@input`", "Using `v-bind:input`", "Using `v-if:input`"],
    "correctAnswer": "Using `@input`"
  },
  {
    "question": "How do you handle a form submit event in Vue.js using the Composition API?",
    "options": ["Using `v-on:submit`", "Using `v-bind:submit`", "Using `v-if:submit`"],
    "correctAnswer": "Using `v-on:submit`"
  },
  {
    "question": "How can you prevent the default behavior of an event in Vue JS?",
    "options": [
      "Using `@click`",
      "Using `@click.prevent`",
      "Using `@click.stop`",
      "Using `@click.capture`"
    ],
    "correctAnswer": "Using `@click.prevent`"
  },
  {
    "question": "How do you handle a submit event with the `.stop` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@submit`",
      "Using `@submit.prevent`",
      "Using `@submit.stop`",
      "Using `@submit.capture`"
    ],
    "correctAnswer": "Using `@submit.stop`"
  },
  {
    "question": "How do you handle a keydown event with the `.capture` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@keydown`",
      "Using `@keydown.prevent`",
      "Using `@keydown.stop`",
      "Using `@keydown.capture`"
    ],
    "correctAnswer": "Using `@keydown.capture`"
  },
  {
    "question": "How do you bind a `textarea` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@input`",
      "Using `v-bind:value` and `@change`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@input`"
  },
  {
    "question": "How do you bind a `checkbox` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:checked` and `@input`",
      "Using `v-bind:checked` and `@change`",
      "Using `v-bind:checked` and `@click`",
      "Using `v-bind:checked` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:checked` and `@change`"
  },
  {
    "question": "How do you bind a `select` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@input`",
      "Using `v-bind:value` and `@change`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@change`"
  },
  {
    "question": "Which lifecycle hook is called before a component is mounted in Vue.js using the Composition API?",
    "options": ["onMounted", "onBeforeMount", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onBeforeMount"
  },
  {
    "question": "Which lifecycle hook is called after a component is mounted in Vue.js using the Composition API?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onMounted"
  },
  {
    "question": "To display the value from the data property 'message' inside a <p> tag with text interpolation, what is the correct syntax?",
    "options": [
      "<p>message</p>",
      "<p>## message ##</p>",
      "<p>$$ message $$</p>",
      "<p>{{ message }}</p>"
    ],
    "correctAnswer": "<p>{{ message }}</p>"
  },
  {
    "question": "What is the correct syntax for text interpolation in Vue.js?",
    "options": ["{{ message }}", "{ message }", "[[ message ]]", "( message )"],
    "correctAnswer": "{{ message }}"
  },
  {
    "question": "How do you bind a JavaScript expression to the <div> using Vue.js interpolation?",
    "codeSnippet": "<template>\n  <div><!-- Answer goes here --></div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst message = ref('Hello');\n</script>",
    "options": [
      "{{ message + '!' }}",
      "{ message + '!' }",
      "[[ message + '!' ]]",
      "( message + '!' )"
    ],
    "correctAnswer": "{{ message + '!' }}"
  },
  {
    "question": "Which of the following is NOT a valid use of Vue.js interpolation?",
    "options": [
      "Binding text content",
      "Binding HTML content",
      "Binding attributes",
      "Binding event handlers"
    ],
    "correctAnswer": "Binding event handlers"
  },

  {
    "question": "Vue uses a file to initialize the root Vue instance and mount it to the DOM, what is the file's name?",
    "options": ["main.js", "settings.js", "config.js", "view.js"],
    "correctAnswer": "main.js"
  },
  {
    "question": "Which lifecycle hook is called before a component is updated in Vue.js using the Composition API?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onBeforeUpdate"
  },
  {
    "question": "In which lifecycle hook is the DOM accessible and ready for manipulation?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onMounted"
  },
  {
    "question": "What is the primary difference between `watch` and `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically",
      "`watchEffect` requires a specific source to watch, while `watch` runs immediately and tracks dependencies automatically",
      "`watch` and `watchEffect` are identical in functionality",
      "`watch` is used for computed properties, while `watchEffect` is used for reactive properties"
    ],
    "correctAnswer": "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically"
  },
  {
    "question": "When should you use `watch` instead of `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "When you need to watch a specific reactive property or ref",
      "When you need to track dependencies automatically",
      "When you need to run the watcher immediately",
      "When you need to watch multiple reactive properties"
    ],
    "correctAnswer": "When you need to watch a specific reactive property or ref"
  },
  {
    "question": "When should you use `watchEffect` instead of `watch` in Vue.js using the Composition API?",
    "options": [
      "When you need to track dependencies automatically and run the effect immediately",
      "When you need to watch a specific reactive property or ref",
      "When you need to run the watcher only when a specific property changes",
      "When you need to watch multiple reactive properties"
    ],
    "correctAnswer": "When you need to track dependencies automatically and run the effect immediately"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `ref`"
  },
  {
    "question": "How do you focus an input element using a template ref in Vue 3?",
    "options": [
      "Using `inputRef.value.focus()` in `onMounted`",
      "Using `inputRef.value.focus()` in `onBeforeMount`",
      "Using `inputRef.value.focus()` in `onBeforeUpdate`",
      "Using `inputRef.value.focus()` in `onUpdated`"
    ],
    "correctAnswer": "Using `inputRef.value.focus()` in `onMounted`"
  },
  {
    "question": "How do you access a DOM element's properties using a template ref in Vue 3?",
    "options": [
      "Using `divRef.value.innerText` in `onMounted`",
      "Using `divRef.value.innerText` in `onBeforeMount`",
      "Using `divRef.value.innerText` in `onBeforeUpdate`",
      "Using `divRef.value.innerText` in `onUpdated`"
    ],
    "correctAnswer": "Using `divRef.value.innerText` in `onMounted`"
  },
  {
    "question": "How do you access a DOM element using in Vue 3 composition API?",
    "options": ["Using `ref`", "Using `reactive`", "Using `useTemplateRef`", "Using `computed`"],
    "correctAnswer": "Using `useTemplateRef`"
  },
  {
    "question": "How do you define props in a Vue 3 component using the Composition API?",
    "options": ["Using `defineProps`", "Using `props`", "Using `setupProps`", "Using `useProps`"],
    "correctAnswer": "Using `defineProps`"
  },
  {
    "question": "How do you pass dynamic props to a child component in Vue 3?",
    "options": ["Using `v-bind`", "Using `v-if`", "Using `v-for`", "Using `v-model`"],
    "correctAnswer": "Using `v-bind`"
  },
  {
    "question": "What is the purpose of `v-bind` directive when used with an object in Vue.js?",
    "options": [
      "To bind an attribute to an expression",
      "To create a loop for rendering a list of items",
      "To dynamically bind multiple attributes",
      "To handle user input events"
    ],
    "correctAnswer": "To dynamically bind multiple attributes"
  },
  {
    "question": "How do you define a boolean prop in a Vue 3 component using the Composition API?",
    "options": [
      "Using `defineProps` with `Boolean`",
      "Using `props` with `Boolean`",
      "Using `setupProps` with `Boolean`",
      "Using `useProps` with `Boolean`"
    ],
    "correctAnswer": "Using `defineProps` with `Boolean`"
  },
  {
    "question": "How do you emit and listen to custom events in Vue 3 using the Composition API?",
    "options": [
      "Using `defineEmits` and `@custom-event`",
      "Using `defineProps` and `@custom-event`",
      "Using `defineEmits` and `@click`",
      "Using `defineProps` and `@click`"
    ],
    "correctAnswer": "Using `defineEmits` and `@custom-event`"
  },
  {
    "question": "What is the purpose of slots in Vue.js?",
    "options": [
      "To pass data from parent to child components",
      "To define reusable templates within a component",
      "To handle events in a component",
      "To manage state in a component"
    ],
    "correctAnswer": "To define reusable templates within a component"
  },
  {
    "question": "How do you define a default slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template #default>`",
      "Using `<template slot:default>`",
      "Using `<template v-slot>`",
      "Using `<template slot>`"
    ],
    "correctAnswer": "Using `<template #default>`"
  },
  {
    "question": "How do you define a named slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template v-slot:header>`",
      "Using `<template slot:header>`",
      "Using `<template v-slot>`",
      "Using `<template slot>`"
    ],
    "correctAnswer": "Using `<template v-slot:header>`"
  },
  {
    "question": "How do you conditionally render a slot in Vue 3 using the Composition API?",
    "options": [
      "Using `v-if` with `<template #default>`",
      "Using `v-show` with `<template #default>`",
      "Using `v-if` with `<template slot:default>`",
      "Using `v-show` with `<template slot:default>`"
    ],
    "correctAnswer": "Using `v-if` with `<template #default>`"
  },
  {
    "question": "How can you add a transition effect to an element in Vue?",
    "options": [
      "Using <Transition> wrapper element",
      "Using the v-transition directive",
      "Using the transition() method",
      "Vue JS doesn't support Transition"
    ],
    "correctAnswer": "Using <Transition> wrapper element"
  },
  {
    "question": "Which specific attribute is recommended to add when generating elements with v-for",
    "options": ["number", "elementId", "key", "note"],
    "correctAnswer": "key"
  },
  {
    "question": "What is the use of `:key` attribute when used with `v-for`",
    "options": [
      "It sets the CSS class for each element in the loop",
      "It binds the value to the element's content",
      "It identifies each rendered element, aiding to efficient updates",
      "It triggers a methos when the element is clicked"
    ],
    "correctAnswer": "It identifies each rendered element, aiding to efficient updates"
  },
  {
    "question": "What attribute must be used to make the CSS rules inside the <style> tag of a component local to only that specific component?",
    "options": ["<style scoped>", "<style local>", "<style this>"],
    "correctAnswer": "<style scoped>"
  },
  {
    "question": "How do you dynamically bind CSS styles to an element in Vue 3, Select the incorrect statement?",
    "codeSnippet": "<template>\n  <p>This is a styled div</p>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst divStyles = ref({\n  color: 'red'});\n</script>",
    "options": [
      "<p :style=\"divStyles\">This is a styled div</p>",
      "<style scoped> p { color: v-bind('divStyles.color'); } </style>",
      "<p :class=\"divStyles\">This is a styled div</p>"
    ],
    "correctAnswer": "<p :class=\"divStyles\">This is a styled div</p>"
  },
  {
    "question": "What is the purpose of the `v-html` directive in Vue.js?",
    "options": [
      "To bind raw HTML content to an element",
      "To bind CSS styles to an element",
      "To bind JavaScript events to an element",
      "To bind text content to an element"
    ],
    "correctAnswer": "To bind raw HTML content to an element"
  },
  {
    "question": "What is the purpose of the `v-pre` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip binding of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip compilation of the element and its children"
  },
  {
    "question": "What is the purpose of the `v-cloak` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip binding of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip rendering of the element and its children"
  },
  {
    "question": "What is the purpose of the `v-once` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip binding of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip re-rendering of the element and its children"
  },
  {
    "question": "What is the purpose of the `v-text` directive in Vue.js?",
    "options": [
      "To bind raw HTML content to an element",
      "To bind text content to an element",
      "To bind CSS styles to an element",
      "To bind JavaScript events to an element"
    ],
    "correctAnswer": "To bind text content to an element"
  },
  {
    "question": "What is the purpose of the `v-show` directive in Vue.js?",
    "options": [
      "To conditionally render elements",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To conditionally render elements"
  },
  {
    "question": "What is the purpose of the `v-if` directive in Vue.js?",
    "options": [
      "To conditionally render elements",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To conditionally render elements"
  },
  {
    "question": "Which of the following is a correct usage of the `v-html` directive in Vue.js?",
    "codeSnippet": "<template>\n  <!-- Answer goes here -->\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst rawHtml = ref('<p>This is <strong>raw HTML</strong> content.</p>');\n</script>",
    "options": [
      "<div v-html=\"rawHtml\"></div>",
      "<div v-html=\"<p>This is <strong>raw HTML</strong> content.</p>\"></div>",
      "<div v-html:rawHtml></div>",
      "<div v-html=\"{{rawHtml}}\"></div>"
    ],
    "correctAnswer": "<div v-html=\"rawHtml\"></div>"
  },
  {
    "question": "What should you be cautious about when using the `v-html` directive in Vue.js?",
    "options": [
      "It can make your application vulnerable to XSS attacks if the content is not sanitized",
      "It can cause performance issues",
      "It can break the reactivity system",
      "It can only be used with static content"
    ],
    "correctAnswer": "It can make your application vulnerable to XSS attacks if the content is not sanitized"
  },
  {
    "question": "How to create a dynamic component in Vue JS",
    "options": ["<Slot>", "<component>", "<dynamic-component>", "<KeepAlive>"],
    "correctAnswer": "<component>"
  },

  {
    "question": "Which attribute is used with the <component> tag so that we can switch between components?",
    "options": ["dynamic", "switch", "is", "componentName"],
    "correctAnswer": "is"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template>\n <Transition>\n  <div v-show=\"someCondition\">\n   First condition\n  </div>\n  <div v-show=\"!someCondition\">\n   Other condition\n  </div>\n </Transition> \n</template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will throw runtime error `<Transition> expects exactly one child element or component`"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template>\n <Transition>\n  <div v-if=\"someCondition\">\n   First condition\n  </div>\n  <div v-else>\n   Other condition\n  </div>\n </Transition> \n</template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will display text `First condition` in view"
  },
  {
    "question": "What will be the output of below code snippet?",
    "codeSnippet": "<template>\n <div v-html=\"<ol><li>Tomatoes</li><li>Potatoes</li></ol>\"></div> \n</template>",
    "options": [
      "Will display `<ol><li>Tomatoes</li><li>Potatoes</li></ol>`",
      "Will display `1.Tomatoes\n2.Potatoes`",
      "Will show compiler error",
      "Will not show anything"
    ],
    "correctAnswer": "Will display `1.Tomatoes\n2.Potatoes`"
  },
  {
    "question": "What is the purpose of the `Transition` component in Vue.js?",
    "options": [
      "To apply transition effects to a single element or component",
      "To apply transition effects to a list of elements or components",
      "To handle form submissions",
      "To manage state in a Vue component"
    ],
    "correctAnswer": "To apply transition effects to a single element or component"
  },
  {
    "question": "How do you use the `TransitionGroup` component to apply transition effects to a list of elements in Vue.js?",
    "options": [
      "Using `transition-group` with `v-for`",
      "Using `transition` with `v-for`",
      "Using `transition-group` with `v-if`",
      "Using `transition` with `v-if`"
    ],
    "correctAnswer": "Using `transition-group` with `v-for`"
  },
  {
    "question": "Which of the following is NOT a valid attribute for the `Transition` component in Vue.js?",
    "options": ["name", "mode", "appear", "tag"],
    "correctAnswer": "tag"
  },
  {
    "question": "What is the primary purpose of async components in Vue.js?",
    "options": [
      "To handle asynchronous data fetching",
      "To dynamically load components only when they are needed",
      "To manage state in a component",
      "To handle event listeners"
    ],
    "correctAnswer": "To dynamically load components only when they are needed"
  },
  {
    "question": "How do you define an async component in Vue.js using a dynamic import?",
    "codeHint": "<template>\n  <component :is=\"AsyncComponent\" />\n</template>\n\n<script setup>\nimport { defineAsyncComponent } from 'vue';\n\nconst AsyncComponent = defineAsyncComponent(() => import('./MyComponent.vue'));\n</script>",
    "options": [
      "Using `defineAsyncComponent` with a dynamic import",
      "Using `defineComponent` with a dynamic import",
      "Using `defineAsyncComponent` with a static import",
      "Using `defineComponent` with a static import"
    ],
    "correctAnswer": "Using `defineAsyncComponent` with a dynamic import"
  },
  {
    "question": "Which of the following is NOT a benefit of using async components in Vue.js?",
    "options": [
      "Reducing the initial load time of the application",
      "Improving the performance by loading components only when needed",
      "Handling large components more efficiently",
      "Automatically managing state within the component"
    ],
    "correctAnswer": "Automatically managing state within the component"
  },
  {
    "question": "What is the purpose of the `Suspense` component in Vue.js?",
    "options": [
      "To handle asynchronous data fetching",
      "To dynamically load components only when they are needed",
      "To manage state in a component",
      "To handle event listeners"
    ],
    "correctAnswer": "To handle asynchronous data fetching"
  },
  {
    "question": "How do you use the `Suspense` component to handle asynchronous data fetching in Vue.js?",
    "options": [
      "Using `Suspense` with `v-if`",
      "Using `Suspense` with `v-show`",
      "Using `Suspense` with `v-for`",
      "Using `Suspense` with `v-slot`"
    ],
    "correctAnswer": "Using `Suspense` with `v-slot`"
  },
  {
    "question": "What is the purpose of the `v-slot` directive in Vue.js?",
    "options": [
      "To bind data to a component",
      "To define a slot in a component",
      "To handle events in a component",
      "To manage state in a component"
    ],
    "correctAnswer": "To define a slot in a component"
  },
  {
    "question": "How do you pass data to a named slot in Vue.js using the `v-slot` directive?",
    "options": [
      "<template v-slot:header=\"slotProps\">",
      "<template slot:header=\"slotProps\">",
      "<template v-slot=\"slotProps\">",
      "<template slot=\"slotProps\">"
    ],
    "correctAnswer": "<template v-slot:header=\"slotProps\">"
  },
  {
    "question": "How do you use the `v-for` directive to render a list of items in Vue.js?",
    "codeSnippet": "<template>\n  <ul>\n    <!-- Answer goes here -->\n  </ul>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst items = ref([\n  { id: 1, name: 'Item 1' },\n  { id: 2, name: 'Item 2' },\n  { id: 3, name: 'Item 3' }\n]);\n</script>",
    "options": [
      "<li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>",
      "<li v-for=\"item of items\" :key=\"item.id\">{{ item.name }}</li>",
      "<li v-for=\"item from items\" :key=\"item.id\">{{ item.name }}</li>",
      "<li v-for=\"item with items\" :key=\"item.id\">{{ item.name }}</li>"
    ],
    "correctAnswer": "<li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>"
  },
  {
    "question": "How do you access both the item and its index when using the `v-for` directive in Vue.js?",
    "codeSnippet": "<template>\n  <ul>\n    <!-- Answer goes here -->\n  </ul>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst items = ref([\n  { id: 1, name: 'Item 1' },\n  { id: 2, name: 'Item 2' },\n  { id: 3, name: 'Item 3' }\n]);\n</script>",
    "options": [
      "<li v-for=\"(item, index) in items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
      "<li v-for=\"(item, index) of items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
      "<li v-for=\"(item, index) from items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
      "<li v-for=\"(item, index) with items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>"
    ],
    "correctAnswer": "<li v-for=\"(item, index) in items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>"
  },
  {
    "question": "What is the primary purpose of composables in Vue.js?",
    "options": [
      "To manage state in a component",
      "To create reusable logic that can be shared across multiple components",
      "To handle event listeners",
      "To define component templates"
    ],
    "correctAnswer": "To create reusable logic that can be shared across multiple components"
  },
  {
    "question": "How do you define a composable function in Vue.js?",
    "options": [
      "By exporting a function that returns reactive state and methods",
      "By defining a method inside a component",
      "By using the `setup` function",
      "By using the `data` option"
    ],
    "correctAnswer": "By exporting a function that returns reactive state and methods"
  },
  {
    "question": "How do you use a composable function in a Vue.js component?",
    "options": [
      "By importing the composable function and calling it inside the `setup` function",
      "By defining the composable function inside the component",
      "By using the `data` option",
      "By using the `methods` option"
    ],
    "correctAnswer": "By importing the composable function and calling it inside the `setup` function"
  },
  {
    "question": "What is the primary purpose of the `KeepAlive` component in Vue.js?",
    "options": [
      "To keep dynamic components alive and preserve their state",
      "To handle event listeners",
      "To manage state in a component",
      "To create reusable logic that can be shared across multiple components"
    ],
    "correctAnswer": "To keep dynamic components alive and preserve their state"
  },
  {
    "question": "How do you use the `KeepAlive` component to cache and preserve the state of a dynamic component in Vue.js?",
    "options": [
      "<KeepAlive><component :is=\"currentComponent\" /></KeepAlive>",
      "<KeepAlive><component v-if=\"currentComponent\" /></KeepAlive>",
      "<KeepAlive><component v-show=\"currentComponent\" /></KeepAlive>"
    ],
    "correctAnswer": "<KeepAlive><component :is=\"currentComponent\" /></KeepAlive>"
  },
  {
    "question": "Which lifecycle hook is called when a component is activated by `KeepAlive` in Vue.js?",
    "codeHint": "<script setup>\nimport { onActivated } from 'vue';\n\nonActivated(() => {\n  console.log('Component activated');\n});\n</script>",
    "options": ["onActivated", "onMounted", "onUpdated", "onBeforeMount"],
    "correctAnswer": "onActivated"
  },
  {
    "question": "What is the purpose of the `provide` and `inject` functions in Vue.js?",
    "options": [
      "To make data available to child components without passing props",
      "To manage state in a component",
      "To handle event listeners",
      "To create reusable logic that can be shared across multiple components"
    ],
    "correctAnswer": "To make data available to child components without passing props"
  },
  {
    "question": "How do you provide data to child components using the `provide` function in Vue.js?",
    "options": [
      "By defining a `provide` property in the parent component's `setup` function",
      "By defining a `provide` property in the child component's `setup` function",
      "By using the `data` option",
      "By using the `props` option"
    ],
    "correctAnswer": "By defining a `provide` property in the parent component's `setup` function"
  },
  {
    "question": "How do you inject data provided by a parent component using the `inject` function in Vue.js?",
    "options": [
      "By calling the `inject` function inside the child component's `setup` function",
      "By calling the `provide` function inside the child component's `setup` function",
      "By using the `data` option",
      "By using the `props` option"
    ],
    "correctAnswer": "By calling the `inject` function inside the child component's `setup` function"
  },
  {
    "question": "What are the three main sections of a Vue.js Single File Component (SFC)?",
    "options": [
      "<template>, <script>, <style>",
      "<template>, <data>, <methods>",
      "<template>, <computed>, <watch>",
      "<template>, <props>, <methods>"
    ],
    "correctAnswer": "<template>, <script>, <style>"
  },
  {
    "question": "What is the purpose of the `<template>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the HTML template of the component",
      "To define the data properties of the component",
      "To define the methods of the component",
      "To define the computed properties of the component"
    ],
    "correctAnswer": "To define the HTML template of the component"
  },
  {
    "question": "What is the purpose of the `<script>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the JavaScript logic of the component",
      "To define the HTML template of the component",
      "To define the CSS styles of the component",
      "To define the data properties of the component"
    ],
    "correctAnswer": "To define the JavaScript logic of the component"
  },
  {
    "question": "What is the purpose of the `<style>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the CSS styles of the component",
      "To define the HTML template of the component",
      "To define the JavaScript logic of the component",
      "To define the data properties of the component"
    ],
    "correctAnswer": "To define the CSS styles of the component"
  },
  {
    "question": "How do you define scoped styles in a Vue.js Single File Component (SFC)?",
    "codeHint": "<template>\n  <div class=\"example\">This is a scoped style example</div>\n</template>\n\n<script>\nexport default {\n  name: 'ExampleComponent'\n};\n</script>\n\n<style scoped>\n.example {\n  color: red;\n}\n</style>",
    "options": [
      "By adding the `scoped` attribute to the `<style>` tag",
      "By adding the `scoped` attribute to the `<template>` tag",
      "By adding the `scoped` attribute to the `<script>` tag",
      "By adding the `scoped` attribute to the `<div>` tag"
    ],
    "correctAnswer": "By adding the `scoped` attribute to the `<style>` tag"
  }
]
