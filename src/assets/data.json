[
  {
    "question": "What is the purpose of the `v-for` directive in Vue.js?",
    "options": [
      "To handle events",
      "To conditionally render elements",
      "To bind attributes to elements",
      "To loop through an array and render a list of elements"
    ],
    "correctAnswer": "To loop through an array and render a list of elements",
    "tag": "Vue"
  },
  {
    "question": "Which modifier is not supported on v-model?",
    "options": ["v-model.lazy", "v-model.number", "v-model.string", "v-model.trim"],
    "correctAnswer": "v-model.string",
    "tag": "Vue"
  },
  {
    "question": "Which inbuilt directive is not a conditional directive?",
    "options": ["v-if", "v-else", "v-show", "v-model"],
    "correctAnswer": "v-model",
    "tag": "Vue"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3?",
    "options": ["Using `ref`", "Using `reactive`", "Using `watch`", "Using `computed`"],
    "correctAnswer": "Using `ref`",
    "tag": "Vue"
  },
  {
    "question": "How do you define a computed property in Vue 3 using the Composition API?",
    "options": ["Using `computed`", "Using `ref`", "Using `reactive`", "Using `watch`"],
    "correctAnswer": "Using `computed`",
    "tag": "Vue"
  },
  {
    "question": "How do you watch a reactive property in Vue 3 using the Composition API?",
    "options": ["Using `watch`", "Using `computed`", "Using `reactive`", "Using `ref`"],
    "correctAnswer": "Using `watch`",
    "tag": "Vue"
  },
  {
    "question": "How do you bind a class dynamically in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-for`", "Using `:class`"],
    "correctAnswer": "Using `:class`",
    "tag": "Vue"
  },
  {
    "question": "To bind a class `newClass` dynamically when `someCondition` is true, which option is incorrect?",
    "codeSnippet": "<div class=\"oldClass\">Some Div</div>",
    "options": [
      "<div class=\"oldClass\" :class=\"['newClass']\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"{ newClass: someCondition }\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"['someCondition ? 'newClass': '']\">Some Div</div>",
      "<div class=\"oldClass\" :class=\"someCondition ? 'newClass': ''\">Some Div</div>"
    ],
    "correctAnswer": "<div class=\"oldClass\" :class=\"['newClass']\">Some Div</div>",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div>{{ reversedMessage }}</div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nconst message = ref('Hello');\nconst reversedMessage = computed(() => message.value.split('').reverse().join(''));\n</script>",
    "options": ["Hello", "undefined", "olleH", "Error"],
    "correctAnswer": "olleH",
    "tag": "Vue"
  },
  {
    "question": "How do you bind multiple classes conditionally in Vue.js using the Composition API?",
    "options": [
      "Using `v-if`",
      "Using `v-for`",
      "Using `v-bind:class`",
      "Using `:class` with an array"
    ],
    "correctAnswer": "Using `:class` with an array",
    "tag": "Vue"
  },
  {
    "question": "How do you bind inline styles dynamically in Vue.js using the Composition API?",
    "options": ["Using `v-for`", "Using `v-if`", "Using `:style`"],
    "correctAnswer": "Using `:style`",
    "tag": "Vue"
  },
  {
    "question": "How do you conditionally render an element in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-if`",
    "tag": "Vue"
  },
  {
    "question": "How do you toggle the visibility of an element in Vue.js with the Composition API?",
    "options": ["Using `v-show`", "Using `v-if`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-show`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the provide() method?",
    "options": [
      "To make data available to other components",
      "To make a strict interface of data shared between components",
      "To keep methods local to a single component",
      "To make data locally available to a specific parent component"
    ],
    "correctAnswer": "To make data available to other components",
    "tag": "Vue"
  },
  {
    "question": "How do you use `v-else` for conditional rendering in Vue.js with the Composition API?",
    "options": [
      "Using `v-show` and `v-else`",
      "Using `v-for` and `v-else`",
      "Using `v-if` and `v-else`",
      "Using `v-bind` and `v-else`"
    ],
    "correctAnswer": "Using `v-if` and `v-else`",
    "tag": "Vue"
  },
  {
    "question": "How do you render a list of items in Vue.js using the Composition API?",
    "options": ["Using `v-for`", "Using `v-if`", "Using `v-show`", "Using `v-bind`"],
    "correctAnswer": "Using `v-for`",
    "tag": "Vue"
  },
  {
    "question": "How do you render a list of items with an index in Vue.js using the Composition API?",
    "options": ["Using `v-for` with an index", "Using `v-if`", "Using `v-show`", "Using `v-bind`"],
    "correctAnswer": "Using `v-for` with an index",
    "tag": "Vue"
  },
  {
    "question": "How do you render a list of items with a template in Vue.js using the Composition API?",
    "options": [
      "Using `v-for` with a template",
      "Using `v-if`",
      "Using `v-show`",
      "Using `v-bind`"
    ],
    "correctAnswer": "Using `v-for` with a template",
    "tag": "Vue"
  },
  {
    "question": "How do you handle a click event in Vue.js using the Composition API?",
    "options": ["Using `@click`", "Using `v-if:click`", "Using `v-bind:click`"],
    "correctAnswer": "Using `@click`",
    "tag": "Vue"
  },
  {
    "question": "How do you handle an input event in Vue.js using the Composition API?",
    "options": ["Using `@input`", "Using `v-if:input`", "Using `v-bind:input`"],
    "correctAnswer": "Using `@input`",
    "tag": "Vue"
  },
  {
    "question": "How do you handle a form submit event in Vue.js using the Composition API?",
    "options": ["Using `v-on:submit`", "Using `v-if:submit`", "Using `v-bind:submit`"],
    "correctAnswer": "Using `v-on:submit`",
    "tag": "Vue"
  },
  {
    "question": "How can you prevent the default behavior of an event in Vue JS?",
    "options": [
      "Using `@click.prevent`",
      "Using `@click`",
      "Using `@click.capture`",
      "Using `@click.stop`"
    ],
    "correctAnswer": "Using `@click.prevent`",
    "tag": "Vue"
  },
  {
    "question": "How do you handle a submit event with the `.stop` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@submit.stop`",
      "Using `@submit`",
      "Using `@submit.capture`",
      "Using `@submit.prevent`"
    ],
    "correctAnswer": "Using `@submit.stop`",
    "tag": "Vue"
  },
  {
    "question": "How do you handle a keydown event with the `.capture` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@keydown.capture`",
      "Using `@keydown`",
      "Using `@keydown.stop`",
      "Using `@keydown.prevent`"
    ],
    "correctAnswer": "Using `@keydown.capture`",
    "tag": "Vue"
  },
  {
    "question": "How do you bind a `textarea` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@input`",
      "Using `v-bind:value` and `@keydown`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@change`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@input`",
    "tag": "Vue"
  },
  {
    "question": "How do you bind a `checkbox` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:checked` and `@change`",
      "Using `v-bind:checked` and `@keydown`",
      "Using `v-bind:checked` and `@input`",
      "Using `v-bind:checked` and `@click`"
    ],
    "correctAnswer": "Using `v-bind:checked` and `@change`",
    "tag": "Vue"
  },
  {
    "question": "How do you bind a `select` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@change`",
      "Using `v-bind:value` and `@keydown`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@input`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@change`",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook should be used to access an element via template ref?",
    "options": ["onMounted", "onUpdated", "onBeforeMount", "onBeforeUpdate"],
    "correctAnswer": "onMounted",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div>{{ count }}</div>\n</template>\n\n<script setup>\nimport { ref, watch } from 'vue';\nconst count = ref(0);\nwatch(count, (newValue, oldValue) => {\n  console.log(`Count changed from ${oldValue} to ${newValue}`);\n});\ncount.value = 5;\n</script>",
    "options": ["Count changed from 0 to 5", "5", "undefined", "Error"],
    "correctAnswer": "Count changed from 0 to 5",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook should be used to clear pending timers and intervals?",
    "options": ["onMounted", "onUpdated", "onBeforeMount", "onUnmounted"],
    "correctAnswer": "onUnmounted",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook is called after any DOM update of the component, caused by different state changes?",
    "options": ["onMounted", "onUpdated", "onBeforeMount", "onUnmounted"],
    "correctAnswer": "onUpdated",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook is called when the component has finished setting up its reactive state, but no DOM nodes have been created yet?",
    "options": ["onMounted", "onUpdated", "onBeforeMount", "onUnmounted"],
    "correctAnswer": "onBeforeMount",
    "tag": "Vue"
  },
  {
    "question": "To display the value from the data property 'message' inside a <p> tag with text interpolation, what is the correct syntax?",
    "options": [
      "<p>{{ message }}</p>",
      "<p>message</p>",
      "<p>$$ message $$</p>",
      "<p>## message ##</p>"
    ],
    "correctAnswer": "<p>{{ message }}</p>",
    "tag": "Vue"
  },
  {
    "question": "What is the correct syntax for text interpolation in Vue.js?",
    "options": ["{{ message }}", "[[ message ]]", "( message )", "{ message }"],
    "correctAnswer": "{{ message }}",
    "tag": "Vue"
  },
  {
    "question": "How do you bind a JavaScript expression to the <div> using Vue.js interpolation?",
    "codeSnippet": "<template>\n<div><!-- Answer goes here --></div>\n</template><script setup>\nimport { ref } from 'vue';\nconst message = ref('Hello');</script>",
    "options": [
      "{{ message + '!' }}",
      "[[ message + '!' ]]",
      "( message + '!' )",
      "{ message + '!' }"
    ],
    "correctAnswer": "{{ message + '!' }}",
    "tag": "Vue"
  },
  {
    "question": "Which of the following options will disable the button in code snippet?",
    "codeSnippet": "<template>\n<button>Click Me!</button>\n</template>",
    "options": [
      "Using `:disabled=\"false\"`",
      "Using `:disabled=\"undefined\"`",
      "Using `:disabled=\"true\"`",
      "Using `:disabled=\"null\"`"
    ],
    "correctAnswer": "Using `:disabled=\"true\"`",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <ul>\n    <li v-for=\"(item, index) in items\" :key=\"index\" ref=\"setItemRef\">{{ item }}</li>\n  </ul>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nconst items = ref(['Item 1', 'Item 2', 'Item 3']);\nconst itemRefs = ref([]);\nconst setItemRef = (el) => {\n  if (el) itemRefs.value.push(el);\n};\nonMounted(() => {\n  itemRefs.value.forEach((el, index) => {\n    el.style.color = 'red';\n  });\n});\n</script>",
    "options": [
      "All list items will have red text",
      "No list items will have red text",
      "Only the first list item will have red text",
      "Error"
    ],
    "correctAnswer": "All list items will have red text",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <input ref=\"myInput\" type=\"text\" />\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nconst myInput = ref(null);\nonMounted(() => {\n  myInput.value.focus();\n});\n</script>",
    "options": [
      "The input element will be focused",
      "The input element will be focused on blur",
      "The input element will not be focused",
      "Error"
    ],
    "correctAnswer": "The input element will be focused",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <button ref=\"myButton\">Click me</button>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nconst myButton = ref(null);\nonMounted(() => {\n  myButton.value.addEventListener('click', () => {\n    console.log('Button clicked');\n  });\n});\n</script>",
    "options": [
      "'Button clicked' will be logged when the button is clicked",
      "undefined",
      "null",
      "Error"
    ],
    "correctAnswer": "'Button clicked' will be logged when the button is clicked",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <ul>\n    <li v-for=\"(item, index) in items\" :key=\"index\" ref=\"setItemRef\">{{ item }}</li>\n  </ul>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nconst items = ref(['Item 1', 'Item 2', 'Item 3']);\nconst itemRefs = ref([]);\nconst setItemRef = (el) => {\n  if (el) itemRefs.value.push(el);\n};\nonMounted(() => {\n  console.log(itemRefs.value.length);\n});\n</script>",
    "options": ["3", "0", "undefined", "Error"],
    "correctAnswer": "3",
    "tag": "Vue"
  },
  {
    "question": "Which of the following is NOT a valid use of Vue.js interpolation?",
    "options": [
      "Binding event handlers",
      "Binding text content",
      "Binding HTML content",
      "Binding attributes"
    ],
    "correctAnswer": "Binding event handlers",
    "tag": "Vue"
  },
  {
    "question": "Vue uses a file to initialize the root Vue instance and mount it to the DOM, what is the file's name?",
    "options": ["main.js", "view.js", "config.js", "settings.js"],
    "correctAnswer": "main.js",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook can be used to access the DOM state before Vue updates the DOM?",
    "options": ["onBeforeUpdate", "onUpdated", "onBeforeMount", "onMounted"],
    "correctAnswer": "onBeforeUpdate",
    "tag": "Vue"
  },
  {
    "question": "In which lifecycle hook is the DOM accessible and ready for manipulation?",
    "options": ["onMounted", "onBeforeMount", "onUpdated", "onBeforeUpdate"],
    "correctAnswer": "onMounted",
    "tag": "Vue"
  },
  {
    "question": "What is the primary difference between `watch` and `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "`watch` and `watchEffect` are identical in functionality",
      "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically",
      "`watchEffect` requires a specific source to watch, while `watch` runs immediately and tracks dependencies automatically",
      "`watch` is used for computed properties, while `watchEffect` is used for reactive properties"
    ],
    "correctAnswer": "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically",
    "tag": "Vue"
  },
  {
    "question": "When should you use `watch` instead of `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "When you need to run the watcher immediately",
      "When you need to watch a specific reactive property or ref",
      "When you need to track dependencies automatically",
      "When you need to watch multiple reactive properties"
    ],
    "correctAnswer": "When you need to watch a specific reactive property or ref",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div>{{ count }}</div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nconst count = ref(0);\nonMounted(() => {\n  setTimeout(() => {\n    count.value = 10;\n  }, 1000);\n});\n</script>",
    "options": ["10", "0 initially, then 10 after 1 second", "0", "undefined"],
    "correctAnswer": "0 initially, then 10 after 1 second",
    "tag": "Vue"
  },
  {
    "question": "When should you use `watchEffect` instead of `watch` in Vue.js using the Composition API?",
    "options": [
      "When you need to watch multiple reactive properties",
      "When you need to track dependencies automatically and run the effect immediately",
      "When you need to watch a specific reactive property or ref",
      "When you need to run the watcher only when a specific property changes"
    ],
    "correctAnswer": "When you need to track dependencies automatically and run the effect immediately",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div>{{ count }}</div>\n</template>\n\n<script setup>\nimport { ref, watchEffect } from 'vue';\nconst count = ref(0);\nwatchEffect(() => {\n  console.log(`Count is now ${count.value}`);\n});\ncount.value = 5;\n</script>",
    "options": ["Count is now 0\nCount is now 5", "Count is now 5", "undefined", "Error"],
    "correctAnswer": "Count is now 0\nCount is now 5",
    "tag": "Vue"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3 using the Composition API?",
    "options": ["Using `ref`", "Using `reactive`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `ref`",
    "tag": "Vue"
  },
  {
    "question": "How do you focus an input element using a template ref in Vue 3?",
    "options": [
      "Using `inputRef.value.focus()` in `onMounted`",
      "Using `inputRef.value.focus()` in `onBeforeUpdate`",
      "Using `inputRef.value.focus()` in `onUpdated`",
      "Using `inputRef.value.focus()` in `onBeforeMount`"
    ],
    "correctAnswer": "Using `inputRef.value.focus()` in `onMounted`",
    "tag": "Vue"
  },
  {
    "question": "How do you access a DOM element's properties using a template ref in Vue 3?",
    "options": [
      "Using `divRef.value.innerText` in `onMounted`",
      "Using `divRef.value.innerText` in `onBeforeUpdate`",
      "Using `divRef.value.innerText` in `onUpdated`",
      "Using `divRef.value.innerText` in `onBeforeMount`"
    ],
    "correctAnswer": "Using `divRef.value.innerText` in `onMounted`",
    "tag": "Vue"
  },
  {
    "question": "How do you access a DOM element using in Vue 3 composition API?",
    "options": ["Using `useTemplateRef`", "Using `ref`", "Using `reactive`", "Using `computed`"],
    "correctAnswer": "Using `useTemplateRef`",
    "tag": "Vue"
  },
  {
    "question": "How do you define props in a Vue 3 component using the Composition API?",
    "options": ["Using `props`", "Using `defineProps`", "Using `setupProps`", "Using `useProps`"],
    "correctAnswer": "Using `defineProps`",
    "tag": "Vue"
  },
  {
    "question": "How do you pass dynamic props to a child component in Vue 3?",
    "options": ["Using `v-if`", "Using `v-for`", "Using `v-bind`", "Using `v-model`"],
    "correctAnswer": "Using `v-bind`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of `v-bind` directive when used with an object in Vue.js?",
    "options": [
      "To dynamically bind multiple attributes",
      "To create a loop for rendering a list of items",
      "To handle user input events",
      "To bind an attribute to an expression"
    ],
    "correctAnswer": "To dynamically bind multiple attributes",
    "tag": "Vue"
  },
  {
    "question": "How do you define a boolean prop in a Vue 3 component using the Composition API?",
    "options": [
      "Using `props` with `Boolean`",
      "Using `setupProps` with `Boolean`",
      "Using `defineProps` with `Boolean`",
      "Using `useProps` with `Boolean`"
    ],
    "correctAnswer": "Using `defineProps` with `Boolean`",
    "tag": "Vue"
  },
  {
    "question": "How do you emit and listen to custom events in Vue 3 using the Composition API?",
    "options": [
      "Using `defineEmits` and `@click`",
      "Using `defineProps` and `@click`",
      "Using `defineEmits` and `@custom-event`",
      "Using `defineProps` and `@custom-event`"
    ],
    "correctAnswer": "Using `defineEmits` and `@custom-event`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of slots in Vue.js?",
    "options": [
      "To pass data from parent to child components",
      "To define reusable templates within a component",
      "To handle events in a component",
      "To manage state in a component"
    ],
    "correctAnswer": "To define reusable templates within a component",
    "tag": "Vue"
  },
  {
    "question": "How do you define a default slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template slot:default>`",
      "Using `<template v-slot>`",
      "Using `<template #default>`",
      "Using `<template slot>`"
    ],
    "correctAnswer": "Using `<template #default>`",
    "tag": "Vue"
  },
  {
    "question": "How do you define a named slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template slot:header>`",
      "Using `<template v-slot>`",
      "Using `<template slot>`",
      "Using `<template v-slot:header>`"
    ],
    "correctAnswer": "Using `<template v-slot:header>`",
    "tag": "Vue"
  },
  {
    "question": "How do you conditionally render a slot in Vue 3 using the Composition API?",
    "options": [
      "Using `v-if` with `<template #default>`",
      "Using `v-show` with `<template #default>`",
      "Using `v-if` with `<template slot:default>`",
      "Using `v-show` with `<template slot:default>`"
    ],
    "correctAnswer": "Using `v-if` with `<template #default>`",
    "tag": "Vue"
  },
  {
    "question": "How can you add a transition effect to an element in Vue?",
    "options": [
      "Using <Transition> wrapper element",
      "Using the v-transition directive",
      "Using the transition() method",
      "Vue JS doesn't support Transition"
    ],
    "correctAnswer": "Using <Transition> wrapper element",
    "tag": "Vue"
  },
  {
    "question": "Which specific attribute is recommended to add when generating elements with v-for",
    "options": ["number", "elementId", "key", "note"],
    "correctAnswer": "key",
    "tag": "Vue"
  },
  {
    "question": "What is the use of `:key` attribute when used with `v-for`",
    "options": [
      "It sets the CSS class for each element in the loop",
      "It binds the value to the element's content",
      "It identifies each rendered element, aiding to efficient updates",
      "It triggers a methos when the element is clicked"
    ],
    "correctAnswer": "It identifies each rendered element, aiding to efficient updates",
    "tag": "Vue"
  },
  {
    "question": "What attribute must be used to make the CSS rules inside the <style> tag of a component local to only that specific component?",
    "options": ["<style local>", "<style scoped>", "<style this>"],
    "correctAnswer": "<style scoped>",
    "tag": "Vue"
  },
  {
    "question": "How do you dynamically bind CSS styles to an element in Vue 3, Select the incorrect statement?",
    "codeSnippet": "<template>\n<p>This is a styled div</p>\n</template><script setup>\nimport { ref } from 'vue';\nconst divStyles = ref({  color: 'red'});</script>",
    "options": [
      "<p :style=\"divStyles\">This is a styled div</p>",
      "<style scoped> p { color: v-bind('divStyles.color'); } </style>",
      "<p :class=\"divStyles\">This is a styled div</p>"
    ],
    "correctAnswer": "<p :class=\"divStyles\">This is a styled div</p>",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div :class=\"{ active: isActive }\">Hello</div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst isActive = ref(true);\n</script>",
    "options": [
      "<div class=\"active\">Hello</div>",
      "<div>Hello</div>",
      "<div class=\"\">Hello</div>",
      "Error"
    ],
    "correctAnswer": "<div class=\"active\">Hello</div>",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div :style=\"{ color: textColor }\">Hello</div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst textColor = ref('red');\n</script>",
    "options": [
      "<div style=\"color: red;\">Hello</div>",
      "<div>Hello</div>",
      "<div style=\"\">Hello</div>",
      "Error"
    ],
    "correctAnswer": "<div style=\"color: red;\">Hello</div>",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div :class=\"[isActive ? 'active' : '', 'base']\">Hello</div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst isActive = ref(false);\n</script>",
    "options": [
      "<div class=\"active base\">Hello</div>",
      "<div class=\"base\">Hello</div>",
      "<div>Hello</div>",
      "Error"
    ],
    "correctAnswer": "<div class=\"base\">Hello</div>",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "<template>\n  <div :style=\"{ backgroundColor: isActive ? 'green' : 'red' }\">Hello</div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nconst isActive = ref(true);\n</script>",
    "options": [
      "<div>Hello</div>",
      "Error",
      "<div style=\"background-color: green;\">Hello</div>",
      "<div style=\"background-color: red;\">Hello</div>"
    ],
    "correctAnswer": "<div style=\"background-color: green;\">Hello</div>",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-html` directive in Vue.js?",
    "options": [
      "To bind raw HTML content to an element",
      "To bind CSS styles to an element",
      "To bind JavaScript events to an element",
      "To bind text content to an element"
    ],
    "correctAnswer": "To bind raw HTML content to an element",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-pre` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip binding of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip compilation of the element and its children",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-cloak` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip binding of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip rendering of the element and its children",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-once` directive in Vue.js?",
    "options": [
      "To skip compilation of the element and its children",
      "To skip rendering of the element and its children",
      "To skip re-rendering of the element and its children",
      "To skip styling of the element and its children"
    ],
    "correctAnswer": "To skip re-rendering of the element and its children",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-text` directive in Vue.js?",
    "options": [
      "To bind raw HTML content to an element",
      "To bind text content to an element",
      "To bind CSS styles to an element",
      "To bind JavaScript events to an element"
    ],
    "correctAnswer": "To bind text content to an element",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-show` directive in Vue.js?",
    "options": [
      "To conditionally toggle elements visiblity",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To conditionally toggle elements visiblity",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-if` directive in Vue.js?",
    "options": [
      "To conditionally render elements",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To conditionally render elements",
    "tag": "Vue"
  },
  {
    "question": "Which of the following is a correct usage of the `v-html` directive in Vue.js?",
    "codeSnippet": "<template><!-- Answer goes here --></template><script setup>\nimport { ref } from 'vue';\nconst rawHtml = ref('<p>This is <strong>raw HTML</strong> content.</p>');</script>",
    "options": [
      "<div v-html=\"<p>This is <strong>raw HTML</strong> content.</p>\"></div>",
      "<div v-html:rawHtml></div>",
      "<div v-html=\"rawHtml\"></div>",
      "<div v-html=\"{{rawHtml}}\"></div>"
    ],
    "correctAnswer": "<div v-html=\"rawHtml\"></div>",
    "tag": "Vue"
  },
  {
    "question": "When using `v-html`, select the correct statement for styling content",
    "codeSnippet": "<template>\n<div v-html=\"rawHTML\"></div>\n</template><script setup>\nconst rawHTML = ref('<p>This is <strong>raw HTML</strong> content.</p>');</script><style scoped> p {\ncolor: red;}</style>",
    "options": [
      "It will display the paragraph content in red color",
      "Styling will not be applied on paragraph <p> content",
      "Paragraph content will not be rendered"
    ],
    "correctAnswer": "Styling will not be applied on paragraph <p> content",
    "tag": "Vue"
  },
  {
    "question": "When using `v-html`, select the correct statement for styling content",
    "codeSnippet": "<template>\n<div v-html=\"rawHTML\"></div>\n</template><script setup>\nconst rawHTML = ref('<p>This is <strong>raw HTML</strong> content.</p>');</script><style> p {\ncolor: red;}</style>",
    "options": [
      "It will display the paragraph content in red color",
      "Styling will not be applied on paragraph <p> content",
      "Paragraph content will not be rendered"
    ],
    "correctAnswer": "It will display the paragraph content in red color",
    "tag": "Vue"
  },
  {
    "question": "What should you be cautious about when using the `v-html` directive in Vue.js?",
    "options": [
      "It can break the reactivity system",
      "It can make your application vulnerable to XSS attacks if the content is not sanitized",
      "It can cause performance issues",
      "It can only be used with static content"
    ],
    "correctAnswer": "It can make your application vulnerable to XSS attacks if the content is not sanitized",
    "tag": "Vue"
  },
  {
    "question": "How to create a dynamic component in Vue JS",
    "options": ["<Slot>", "<component>", "<dynamic-component>", "<KeepAlive>"],
    "correctAnswer": "<component>",
    "tag": "Vue"
  },
  {
    "question": "Which attribute is used with the <component> tag so that we can switch between components?",
    "options": ["dynamic", "switch", "is", "componentName"],
    "correctAnswer": "is",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template>\n<Transition>\n<div v-show=\"someCondition\">First condition</div>\n<div v-show=\"!someCondition\">Other condition</div> </Transition>\n</template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will throw runtime error `<Transition> expects exactly one child element or component`",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template> <Transition>  <div v-if=\"someCondition\">   First condition  </div>  <div v-else>   Other condition  </div> </Transition> </template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will display text `First condition` in view",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of below code snippet?",
    "codeSnippet": "<template> <div v-html=\"<ol><li>Tomatoes</li><li>Potatoes</li></ol>\"></div> </template>",
    "options": [
      "Will display `<ol><li>Tomatoes</li><li>Potatoes</li></ol>`",
      "Will display `1.Tomatoes\n2.Potatoes`",
      "Will show compiler error",
      "Will not show anything"
    ],
    "correctAnswer": "Will display `1.Tomatoes\n2.Potatoes`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `Transition` component in Vue.js?",
    "options": [
      "To apply transition effects to a list of elements or components",
      "To apply transition effects to a single element or component",
      "To handle form submissions",
      "To manage state in a Vue component"
    ],
    "correctAnswer": "To apply transition effects to a single element or component",
    "tag": "Vue"
  },
  {
    "question": "How do you use the `TransitionGroup` component to apply transition effects to a list of elements in Vue.js?",
    "options": [
      "Using `transition-group` with `v-for`",
      "Using `transition` with `v-for`",
      "Using `transition-group` with `v-if`",
      "Using `transition` with `v-if`"
    ],
    "correctAnswer": "Using `transition-group` with `v-for`",
    "tag": "Vue"
  },
  {
    "question": "Which of the following is NOT a valid attribute for the `Transition` component in Vue.js?",
    "options": ["name", "mode", "appear", "tag"],
    "correctAnswer": "tag",
    "tag": "Vue"
  },
  {
    "question": "What is the primary purpose of async components in Vue.js?",
    "options": [
      "To handle asynchronous data fetching",
      "To dynamically load components only when they are needed",
      "To manage state in a component",
      "To handle event listeners"
    ],
    "correctAnswer": "To dynamically load components only when they are needed",
    "tag": "Vue"
  },
  {
    "question": "How do you define an async component in Vue.js using a dynamic import?",
    "codeHint": "<template>  <component :is=\"AsyncComponent\" /></template><script setup>\nimport { defineAsyncComponent } from 'vue';\nconst AsyncComponent = defineAsyncComponent(() => import('./MyComponent.vue'));</script>",
    "options": [
      "Using `defineAsyncComponent` with a dynamic import",
      "Using `defineComponent` with a dynamic import",
      "Using `defineAsyncComponent` with a static import",
      "Using `defineComponent` with a static import"
    ],
    "correctAnswer": "Using `defineAsyncComponent` with a dynamic import",
    "tag": "Vue"
  },
  {
    "question": "Which of the following is NOT a benefit of using async components in Vue.js?",
    "options": [
      "Reducing the initial load time of the application",
      "Improving the performance by loading components only when needed",
      "Handling large components more efficiently",
      "Automatically managing state within the component"
    ],
    "correctAnswer": "Automatically managing state within the component",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `Suspense` component in Vue.js?",
    "options": [
      "To handle asynchronous data fetching",
      "To dynamically load components only when they are needed",
      "To manage state in a component",
      "To handle event listeners"
    ],
    "correctAnswer": "To handle asynchronous data fetching",
    "tag": "Vue"
  },
  {
    "question": "How do you use the `Suspense` component to handle asynchronous data fetching in Vue.js?",
    "options": [
      "Using `Suspense` with `v-if`",
      "Using `Suspense` with `v-show`",
      "Using `Suspense` with `v-for`",
      "Using `Suspense` with `v-slot`"
    ],
    "correctAnswer": "Using `Suspense` with `v-slot`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `v-slot` directive in Vue.js?",
    "options": [
      "To bind data to a component",
      "To define a slot in a component",
      "To handle events in a component",
      "To manage state in a component"
    ],
    "correctAnswer": "To define a slot in a component",
    "tag": "Vue"
  },
  {
    "question": "How do you pass data to a named slot in Vue.js using the `v-slot` directive?",
    "options": [
      "<template v-slot:header=\"slotProps\">",
      "<template slot:header=\"slotProps\">",
      "<template v-slot=\"slotProps\">",
      "<template slot=\"slotProps\">"
    ],
    "correctAnswer": "<template v-slot:header=\"slotProps\">",
    "tag": "Vue"
  },
  {
    "question": "How do you use the `v-for` directive to render a list of items in Vue.js?",
    "codeSnippet": "<template>  <ul>    <!-- Answer goes here -->  </ul></template><script setup>\nimport { ref } from 'vue';\nconst items = ref([  { id: 1, name: 'Item 1' },  { id: 2, name: 'Item 2' },  { id: 3, name: 'Item 3' }]);</script>",
    "options": [
      "<li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>",
      "<li v-for=\"item from items\" :key=\"item.id\">{{ item.name }}</li>",
      "<li v-for=\"item with items\" :key=\"item.id\">{{ item.name }}</li>"
    ],
    "correctAnswer": "<li v-for=\"item in items\" :key=\"item.id\">{{ item.name }}</li>",
    "tag": "Vue"
  },
  {
    "question": "How do you access both the item and its index when using the `v-for` directive in Vue.js?",
    "codeSnippet": "<template>  <ul>    <!-- Answer goes here -->  </ul></template><script setup>\nimport { ref } from 'vue';\nconst items = ref([  { id: 1, name: 'Item 1' },  { id: 2, name: 'Item 2' },  { id: 3, name: 'Item 3' }]);</script>",
    "options": [
      "<li v-for=\"(item, index) of items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
      "<li v-for=\"(item, index) from items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
      "<li v-for=\"(item, index) with items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>"
    ],
    "correctAnswer": "<li v-for=\"(item, index) of items\" :key=\"item.id\">{{ index }} - {{ item.name }}</li>",
    "tag": "Vue"
  },
  {
    "question": "How do you iterate over the properties of an object to get key and value for each property in Vue.js?",
    "codeHint": "<template>  <ul>    <li v-for=\"(value, key) in user\" :key=\"key\">{{ key }}: {{ value }}</li>  </ul></template><script setup>\nimport { ref } from 'vue';\nconst user = ref({  name: 'John Doe',  age: 30,  email: 'john.doe@example.com'});</script>",
    "options": [
      "Using `v-for=\"(key, value) in user\"`",
      "Using `v-for=\"(value, key) in user\"`",
      "Using `v-for=\"value in user\"`",
      "Using `v-for=\"key in user\"`"
    ],
    "correctAnswer": "Using `v-for=\"(value, key) in user\"`",
    "tag": "Vue"
  },
  {
    "question": "What is the output of the following code snippet?",
    "codeSnippet": "<template>\n<span v-for=\"n in 5\">{{ n }}</span>\n</template>",
    "options": ["01234", "12345", "1234"],
    "correctAnswer": "12345",
    "tag": "Vue"
  },
  {
    "question": "What is the primary purpose of composables in Vue.js?",
    "options": [
      "To manage state in a component",
      "To create reusable logic that can be shared across multiple components",
      "To handle event listeners",
      "To define component templates"
    ],
    "correctAnswer": "To create reusable logic that can be shared across multiple components",
    "tag": "Vue"
  },
  {
    "question": "How do you define a composable function in Vue.js?",
    "options": [
      "By exporting a function that returns reactive state and methods",
      "By defining a method inside a component",
      "By using the `setup` function",
      "By using the `data` option"
    ],
    "correctAnswer": "By exporting a function that returns reactive state and methods",
    "tag": "Vue"
  },
  {
    "question": "How do you use a composable function in a Vue.js component?",
    "options": [
      "By defining the composable function inside the component",
      "By using the `data` option",
      "By importing the composable function and calling it inside the `setup` function",
      "By using the `methods` option"
    ],
    "correctAnswer": "By importing the composable function and calling it inside the `setup` function",
    "tag": "Vue"
  },
  {
    "question": "What is the primary purpose of the `KeepAlive` component in Vue.js?",
    "options": [
      "To handle event listeners",
      "To manage state in a component",
      "To create reusable logic that can be shared across multiple components",
      "To keep dynamic components alive and preserve their state"
    ],
    "correctAnswer": "To keep dynamic components alive and preserve their state",
    "tag": "Vue"
  },
  {
    "question": "How do you use the `KeepAlive` component to cache and preserve the state of a dynamic component in Vue.js?",
    "options": [
      "<KeepAlive><component v-if=\"currentComponent\" /></KeepAlive>",
      "<KeepAlive><component :is=\"currentComponent\" /></KeepAlive>",
      "<KeepAlive><component v-show=\"currentComponent\" /></KeepAlive>"
    ],
    "correctAnswer": "<KeepAlive><component :is=\"currentComponent\" /></KeepAlive>",
    "tag": "Vue"
  },
  {
    "question": "Which lifecycle hook is called when a component is activated by `KeepAlive` in Vue.js?",
    "codeHint": "<script setup>\nimport { onActivated } from 'vue';\nonActivated(() => {  console.log('Component activated');});</script>",
    "options": ["onMounted", "onUpdated", "onActivated", "onBeforeMount"],
    "correctAnswer": "onActivated",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `provide` and `inject` functions in Vue.js?",
    "options": [
      "To make data available to child components without passing props",
      "To manage state in a component",
      "To handle event listeners",
      "To create reusable logic that can be shared across multiple components"
    ],
    "correctAnswer": "To make data available to child components without passing props",
    "tag": "Vue"
  },
  {
    "question": "How do you provide data to child components using the `provide` function in Vue.js?",
    "options": [
      "By defining a `provide` property in the parent component's `setup` function",
      "By defining a `provide` property in the child component's `setup` function",
      "By using the `data` option",
      "By using the `props` option"
    ],
    "correctAnswer": "By defining a `provide` property in the parent component's `setup` function",
    "tag": "Vue"
  },
  {
    "question": "How do you inject data provided by a parent component using the `inject` function in Vue.js?",
    "options": [
      "By calling the `inject` function inside the child component's `setup` function",
      "By calling the `provide` function inside the child component's `setup` function",
      "By using the `data` option",
      "By using the `props` option"
    ],
    "correctAnswer": "By calling the `inject` function inside the child component's `setup` function",
    "tag": "Vue"
  },
  {
    "question": "What are the three main sections of a Vue.js Single File Component (SFC)?",
    "options": [
      "<template>, <data>, <methods>",
      "<template>, <script>, <style>",
      "<template>, <computed>, <watch>",
      "<template>, <props>, <methods>"
    ],
    "correctAnswer": "<template>, <script>, <style>",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `<template>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the data properties of the component",
      "To define the HTML template of the component",
      "To define the methods of the component",
      "To define the computed properties of the component"
    ],
    "correctAnswer": "To define the HTML template of the component",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `<script>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the HTML template of the component",
      "To define the CSS styles of the component",
      "To define the JavaScript logic of the component",
      "To define the data properties of the component"
    ],
    "correctAnswer": "To define the JavaScript logic of the component",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `<style>` section in a Vue.js Single File Component (SFC)?",
    "options": [
      "To define the CSS styles of the component",
      "To define the HTML template of the component",
      "To define the JavaScript logic of the component",
      "To define the data properties of the component"
    ],
    "correctAnswer": "To define the CSS styles of the component",
    "tag": "Vue"
  },
  {
    "question": "How do you define scoped styles in a Vue.js Single File Component (SFC)?",
    "codeHint": "<template>  <div class=\"example\">This is a scoped style example</div></template><script>\nexport default {  name: 'ExampleComponent'};</script><style scoped>.example {  color: red;}</>",
    "options": [
      "By adding the `scoped` attribute to the `<style>` tag",
      "By adding the `scoped` attribute to the `<template>` tag",
      "By adding the `scoped` attribute to the `<script>` tag",
      "By adding the `scoped` attribute to the `<div>` tag"
    ],
    "correctAnswer": "By adding the `scoped` attribute to the `<style>` tag",
    "tag": "Vue"
  },
  {
    "question": "What is Pinia in the context of Vue.js?",
    "options": [
      "A component library",
      "A routing library",
      "A state management library",
      "A testing library"
    ],
    "correctAnswer": "A state management library",
    "tag": "Vue"
  },
  {
    "question": "How do you install Pinia in a Vue.js project?",
    "options": [
      "npm install pinia",
      "npm install vue-pinia",
      "npm install pinia-vue",
      "npm install vuex-pinia"
    ],
    "correctAnswer": "npm install pinia",
    "tag": "Vue"
  },
  {
    "question": "How do you create a Pinia store in Vue.js?",
    "codeHint": "import { defineStore } from 'pinia';\nexport const useMainStore = defineStore('main', {  state: () => ({    count: 0  }),  actions: {    increment() {      this.count++;    }  }});",
    "options": [
      "Using `createStore`",
      "Using `definePinia`",
      "Using `defineStore`",
      "Using `createPinia`"
    ],
    "correctAnswer": "Using `defineStore`",
    "tag": "Vue"
  },
  {
    "question": "How do you register Pinia in a Vue.js application?",
    "codeHint": "import { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport App from './App.vue';\nconst app = createApp(App);\nconst pinia = createPinia();\napp.use(pinia);\napp.mount('#app');",
    "options": [
      "Using `app.use(store)`",
      "Using `app.use(piniaStore)`",
      "Using `app.use(pinia)`",
      "Using `app.use(createPinia)`"
    ],
    "correctAnswer": "Using `app.use(pinia)`",
    "tag": "Vue"
  },
  {
    "question": "How do you persist the state of a Pinia store?",
    "options": [
      "Using the `persist` property",
      "Using the `localStorage` property",
      "Using the `sessionStorage` property",
      "Using plugins like `pinia-plugin-persistedstate`"
    ],
    "correctAnswer": "Using plugins like `pinia-plugin-persistedstate`",
    "tag": "Vue"
  },
  {
    "question": "How do you install Vue Router in a Vue.js project?",
    "options": [
      "npm install @vue/router",
      "npm install vue-router",
      "npm install vue-router-next",
      "npm install vue-router-vue3"
    ],
    "correctAnswer": "npm install vue-router",
    "tag": "Vue"
  },
  {
    "question": "How do you create a Vue Router instance using the Composition API?",
    "codeHint": "import { createRouter, createWebHistory } from 'vue-router';\nconst routes = [  { path: '/', component: Home },  { path: '/about', component: About }];\nconst router = createRouter({  history: createWebHistory(),  routes});",
    "options": [
      "Using `createRouter` and `createWebHistory`",
      "Using `createRouter` and `createMemoryHistory`",
      "Using `createRouter` and `createHashHistory`",
      "Using `createRouter` and `createBrowserHistory`"
    ],
    "correctAnswer": "Using `createRouter` and `createWebHistory`",
    "tag": "Vue"
  },
  {
    "question": "How do you register the Vue Router instance in a Vue.js application?",
    "codeHint": "import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nconst app = createApp(App);\napp.use(router);\napp.mount('#app');",
    "options": [
      "Using `app.use(router)`",
      "Using `app.use(createRouter)`",
      "Using `app.use(routerInstance)`",
      "Using `app.use(createRouterInstance)`"
    ],
    "correctAnswer": "Using `app.use(router)`",
    "tag": "Vue"
  },
  {
    "question": "How do you navigate to a different route programmatically using the Composition API?",
    "codeHint": "import { useRouter } from 'vue-router';\nconst router = useRouter();\nconst navigateToHome = () => {  router.push('/');};",
    "options": [
      "Using `router.push('/');`",
      "Using `router.go('/');`",
      "Using `router.navigate('/');`",
      "Using `router.redirect('/');`"
    ],
    "correctAnswer": "Using `router.push('/');`",
    "tag": "Vue"
  },
  {
    "question": "How do you access route parameters using the Composition API?",
    "codeHint": "import { useRoute } from 'vue-router';\nconst route = useRoute();\nconst id = route.params.id;",
    "options": [
      "Using `useRouter().params`",
      "Using `useRoute().params`",
      "Using `useRoute().query`",
      "Using `useRouter().query`"
    ],
    "correctAnswer": "Using `useRoute().params`",
    "tag": "Vue"
  },
  {
    "question": "How do you define a dynamic route in Vue Router?",
    "codeHint": "const routes = [  { path: '/user/:id', component: User }];",
    "options": [
      "Using `path: '/user/:id'`",
      "Using `path: '/user/{id}'`",
      "Using `path: '/user/[id]'`",
      "Using `path: '/user/<id>'`"
    ],
    "correctAnswer": "Using `path: '/user/:id'`",
    "tag": "Vue"
  },
  {
    "question": "How do you use named routes in Vue Router?",
    "codeHint": "const routes = [  { path: '/user/:id', name: 'user', component: User }];// Navigation\nrouter.push({ name: 'user', params: { id: 123 } });",
    "options": [
      "Using `name` property in route definition and `router.push({ name: 'user', params: { id: 123 } })`",
      "Using `name` property in route definition and `router.go({ name: 'user', params: { id: 123 } })`",
      "Using `name` property in route definition and `router.navigate({ name: 'user', params: { id: 123 } })`",
      "Using `name` property in route definition and `router.redirect({ name: 'user', params: { id: 123 } })`"
    ],
    "correctAnswer": "Using `name` property in route definition and `router.push({ name: 'user', params: { id: 123 } })`",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of dynamic arguments in Vue.js?",
    "options": [
      "To bind attributes or props dynamically based on an expression",
      "To handle event listeners dynamically",
      "To manage state in a component",
      "To create reusable logic that can be shared across multiple components"
    ],
    "correctAnswer": "To bind attributes or props dynamically based on an expression",
    "tag": "Vue"
  },
  {
    "question": "How do you use dynamic arguments to bind an attribute in Vue.js?",
    "codeHint": "<template>  <div :[attributeName]=\"attributeValue\">Dynamic Attribute</div></template><script setup>\nimport { ref } from 'vue';\nconst attributeName = ref('id');\nconst attributeValue = ref('dynamic-id');</script>",
    "options": [
      "Using `v-on:[attributeName]`",
      "Using `v-if:[attributeName]`",
      "Using `v-for:[attributeName]`",
      "Using `:[attributeName]`"
    ],
    "correctAnswer": "Using `:[attributeName]`",
    "tag": "Vue"
  },
  {
    "question": "How do you use dynamic arguments to bind a handler to a dynamic event name in Vue.js?",
    "options": [
      "Using `@[eventName]`",
      "Using `v-bind:[eventName]`",
      "Using `v-if:[eventName]`",
      "Using `v-for:[eventName]`"
    ],
    "correctAnswer": "Using `@[eventName]`",
    "tag": "Vue"
  },
  {
    "question": "Which of the following statements is true about the difference between `ref` and `reactive` in Vue 3 Composition API?",
    "options": [
      "`ref` is used for primitive values and objects, while `reactive` is used for objects with nested properties",
      "`ref` is used for objects with nested properties, while `reactive` is used for primitive values",
      "`ref` and `reactive` are interchangeable and can be used for the same purposes",
      "`ref` is used for defining computed properties, while `reactive` is used for watching changes"
    ],
    "correctAnswer": "`ref` is used for primitive values and objects, while `reactive` is used for objects with nested properties",
    "tag": "Vue"
  },
  {
    "question": "Which of NOT the limitations of `reactive` in Vue 3 Composition API?",
    "options": [
      "`reactive` can only be used for objects",
      "`reactive` objects do not support reactivity",
      "`reactive` cannot replace entire objects",
      "`reactive` is non destructure friendly and loses reactivity"
    ],
    "correctAnswer": "`reactive` objects do not support reactivity",
    "tag": "Vue"
  },
  {
    "question": "What is the primary difference between computed properties and methods in Vue 3 Composition API?",
    "options": [
      "Computed properties are cached based on their dependencies, while methods are not cached",
      "Methods are cached based on their dependencies, while computed properties are not cached",
      "Computed properties can only return primitive values, while methods can return objects",
      "Methods can only return primitive values, while computed properties can return objects"
    ],
    "correctAnswer": "Computed properties are cached based on their dependencies, while methods are not cached",
    "tag": "Vue"
  },
  {
    "question": "Which of the following statements is true about caching in computed properties in Vue 3 Composition API?",
    "options": [
      "Computed properties are cached and only re-evaluated when their dependencies change",
      "Computed properties are not cached and are re-evaluated on every render",
      "Computed properties are cached and never re-evaluated",
      "Computed properties are cached and re-evaluated on a fixed interval"
    ],
    "correctAnswer": "Computed properties are cached and only re-evaluated when their dependencies change",
    "tag": "Vue"
  },
  {
    "question": "How do you create a writable computed property in Vue 3 Composition API?",
    "codeHint": "import { ref, computed } from 'vue';\nconst count = ref(0);\nconst doubleCount = computed({  get: () => count.value * 2,  set: (value) => {    count.value = value / 2;  }});",
    "options": [
      "Using `computed` with a getter and setter",
      "Using `ref` with a getter and setter",
      "Using `reactive` with a getter and setter",
      "Using `watch` with a getter and setter"
    ],
    "correctAnswer": "Using `computed` with a getter and setter",
    "tag": "Vue"
  },
  {
    "question": "What is the purpose of the `$attrs` property in Vue 3 Composition API?",
    "options": [
      "To access attributes and listeners passed to a component",
      "To define reactive properties",
      "To create computed properties",
      "To manage component state"
    ],
    "correctAnswer": "To access attributes and listeners passed to a component",
    "tag": "Vue"
  },
  {
    "question": "How do you pass attributes to a specific root element in a Vue 3 component?",
    "codeSnippet": "<template>\n<div <!--Answer goes here-->\n<span>Content</span>\n</div>\n</template><script setup>\nimport { defineComponent } from 'vue';\nexport default defineComponent({  inheritAttrs: false});</script>",
    "options": [
      "By using `v-bind=\"$attrs\"` on the desired root element",
      "By using `v-bind=\"$props\"` on the desired root element",
      "By using `v-bind=\"$listeners\"` on the desired root element",
      "By using `v-bind=\"$refs\"` on the desired root element"
    ],
    "correctAnswer": "By using `v-bind=\"$attrs\"` on the desired root element",
    "tag": "Vue"
  },
  {
    "question": "What is the effect of setting `inheritAttrs: false` in a Vue 3 component?",
    "options": [
      "It prevents automatic inheritance of attributes by the root element",
      "It disables reactivity for the component",
      "It prevents the component from receiving props",
      "It disables event handling for the component"
    ],
    "correctAnswer": "It prevents automatic inheritance of attributes by the root element",
    "tag": "Vue"
  },
  {
    "question": "Which directive is NOT compaitable with <template> element in Vue JS?",
    "codeSnippet": "<template>\n<h1>Some value</h1>\n</template>",
    "options": [
      "Using `v-if` directive",
      "Using `v-else` directive",
      "Using `v-show` directive",
      "Using `v-else-if` directive"
    ],
    "correctAnswer": "Using `v-show` directive",
    "tag": "Vue"
  },
  {
    "question": "How do you filter and sort an array of objects in Vue.js using the Composition API?",
    "codeHint": "<template>  <ul>    <li v-for=\"item in filteredAndSortedItems\" :key=\"item.id\">{{ item.name }}</li>  </ul></template><script setup>\nimport { ref, computed } from 'vue';\nconst items = ref([  { id: 1, name: 'Item 3', active: true },  { id: 2, name: 'Item 1', active: false },  { id: 3, name: 'Item 2', active: true }]);\nconst filteredAndSortedItems = computed(() => items.value  .filter(item => item.active)  .sort((a, b) => a.name.localeCompare(b.name)));</script>",
    "options": [
      "Using `watch` with `filter` and `sort` methods",
      "Using `ref` with `filter` and `sort` methods",
      "Using `computed` with `filter` and `sort` methods",
      "Using `reactive` with `filter` and `sort` methods"
    ],
    "correctAnswer": "Using `computed` with `filter` and `sort` methods",
    "tag": "Vue"
  },
  {
    "question": "When `ref` is used inside `v-for`, how should the corresponding `ref` be structured to contain an array value populated with the elements after mount in Vue.js?",
    "codeHint": "<template>  <ul>    <li v-for=\"(item, index) in items\" :key=\"item.id\" :ref=\"el => itemRefs[index] = el\">      {{ item.name }}    </li>  </ul></template><script setup>\nimport { ref, onMounted } from 'vue';\nconst items = ref([  { id: 1, name: 'Item 1' },  { id: 2, name: 'Item 2' },  { id: 3, name: 'Item 3' }]);\nconst itemRefs = ref([]);\nonMounted(() => {  console.log(itemRefs.value); // Array of elements});</script>",
    "options": [
      "The `ref` should be initialized as an empty object and populated with elements using a function inside `v-for`",
      "The `ref` should be initialized as a single element and updated with elements using a function inside `v-for`",
      "The `ref` should be initialized as an empty array and populated with elements using a function inside `v-for`",
      "The `ref` should be initialized as a string and populated with elements using a function inside `v-for`"
    ],
    "correctAnswer": "The `ref` should be initialized as an empty array and populated with elements using a function inside `v-for`",
    "tag": "Vue"
  },
  {
    "question": "How many times the word `test` will be rendered in the console log when the below code snippet is executed?",
    "codeSnippet": "<template>  <div>{{ doubled }} {{ doubled }} {{ doubled }}</div></template><script setup>\nimport { ref, computed } from 'vue';\nconst count = ref(0);\nconst doubled = computed(() => {  console.log('test');  return count.value * 2;});</script>",
    "options": ["0", "1", "2", "3"],
    "correctAnswer": "1",
    "tag": "Vue"
  },
  {
    "question": "How many times the word `test` will be rendered in the console log when the below code snippet is executed?",
    "codeSnippet": "<template>  <div>{{ doubled }} {{ doubled }} {{ doubled }}</div></template><script setup>\nimport { ref, computed } from 'vue';\nconst count = ref(0);\nconst doubled = computed(() => {  console.log('test');  return count.value++;});</script>",
    "options": ["0", "1", "2", "3"],
    "correctAnswer": "3",
    "tag": "Vue"
  },
  {
    "question": "When using the Vue JS slot, The button will be displayed with the text 'Submit'?",
    "codeSnippet": "<template>  <MyButton>Click me</MyButton></template><script setup>\nimport { ref, computed } from 'vue';\nimport MyButton from './MyButton.vue';</script> MyButton.vue<template>  <button><slot>Submit</slot></button></template>",
    "options": ["True", "False"],
    "correctAnswer": "False",
    "tag": "Vue"
  },
  {
    "question": "When using the Vue JS slot, The button will be displayed with the text 'Submit'?",
    "codeSnippet": "<template>  <MyButton></MyButton></template><script setup>\nimport { ref, computed } from 'vue';\nimport MyButton from './MyButton.vue';</script> MyButton.vue<template>  <button><slot>Submit</slot></button></template>",
    "options": ["True", "False"],
    "correctAnswer": "True",
    "tag": "Vue"
  },
  {
    "question": "When using the dynamic attribute binding in Vue JS, How will be <div> element rendered in browser?",
    "codeSnippet": "<template>  <div v-bind=\"attrObj\">This is a div</div></template><script setup>\nconst attrObj = {  id: \"1\", name: \"div name\" };</script>",
    "options": [
      "<div id=\"1\" name=\"div name\">This is a div</div>",
      "<div v-bind=\"attrObj\">This is a div</div>",
      "It will throw an error",
      "It will not render anything"
    ],
    "correctAnswer": "<div id=\"1\" name=\"div name\">This is a div</div>",
    "tag": "Vue"
  },
  {
    "question": "Given the handlers object, which of the following is the correct way to bind all the event handlers to div element at once?",
    "codeSnippet": "<template>  <div>Click me</div></template><script setup>\nconst handlers = {  click: () => console.log('click'),  mouseover: () => console.log('mouseover'),  mouseout: () => console.log('mouseout')};</script>",
    "options": [
      "<div v-on=\"handlers\">Click me</div>",
      "<div v-bind=\"handlers\">Click me</div>",
      "<div v-on:click=\"handlers.click\" v-on:mouseover=\"handlers.mouseover\" v-on:mouseout=\"handlers.mouseout\">Click me</div>"
    ],
    "correctAnswer": "<div v-on=\"handlers\">Click me</div>",
    "tag": "Vue"
  },
  {
    "question": "Select the correct statement when the text property changes?",
    "codeSnippet": "<template>\n<input type=\"text\" v-model=\"text\" />\n<transition>\n<span>{{ text }}</span>\n</transition>\n</template><script setup> import { ref } from 'vue';\nconst text = ref('');</script>",
    "options": [
      "The transition will be triggered",
      "The transition will be trigerred on blur",
      "The transition will not be trigerred"
    ],
    "correctAnswer": "The transition will not be trigerred",
    "tag": "Vue"
  },
  {
    "question": "Select the correct statement when the text property changes?",
    "codeSnippet": "<template>\n<input type=\"text\" v-model=\"text\" />\n<transition>\n<span :key=\"text\">{{ text }}</span>\n</transition>\n</template><script setup> import { ref } from 'vue';\nconst text = ref('');</script>",
    "options": [
      "The transition will be triggered",
      "The transition will be trigerred on blur",
      "The transition will not be trigerred"
    ],
    "correctAnswer": "The transition will be triggered",
    "tag": "Vue"
  },
  {
    "question": "What value will be rendered in the view for computed prop `plusOne`?",
    "codeSnippet": "<template>\n<span>{{ plusOne++ }}</span>\n</template><script setup> import { ref, computed } from 'vue';\nconst count = ref(1);\nconst plusOne = computed(() => count.value + 1);</script>",
    "options": ["0", "1", "2", "3"],
    "correctAnswer": "2",
    "tag": "Vue"
  },
  {
    "question": "What value be the output of `count.value`?",
    "codeSnippet": "<script setup> import { ref, reactive } from 'vue';\nconst count = ref(1);\nconst obj = reactive({ count });\nobj.count++;</script>",
    "options": ["0", "1", "2", "3"],
    "correctAnswer": "2",
    "tag": "Vue"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const promise = new Promise((resolve, reject) => {  setTimeout(() => resolve('Success'), 1000);});\npromise.then(result => console.log(result));",
    "options": ["Success", "Error", "undefined", "null"],
    "correctAnswer": "Success",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const numbers = [1, 2, 3, 4, 5];\nconst result = numbers.map(num => num * 2);\nconsole.log(result);",
    "options": ["[2, 4, 6, 8, 10]", "[1, 2, 3, 4, 5]", "[1, 4, 9, 16, 25]", "[2, 3, 4, 5, 6]"],
    "correctAnswer": "[2, 4, 6, 8, 10]",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const a = 5;\nconst b = '5';\nconsole.log(a == b);\nconsole.log(a === b);",
    "options": ["true false", "false true", "true true", "false false"],
    "correctAnswer": "true false",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const arr = [1, 2, 3, 4, 5];\nconst result = arr.filter(num => num > 2);\nconsole.log(result);",
    "options": ["[3, 4, 5]", "[1, 2, 3, 4, 5]", "[1, 2]", "[2, 3, 4, 5]"],
    "correctAnswer": "[3, 4, 5]",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const promise1 = Promise.resolve('First');\nconst promise2 = Promise.resolve('Second');\nPromise.all([promise1, promise2]).then(values => console.log(values));",
    "options": ["['First', 'Second']", "First Second", "Second First", "Error"],
    "correctAnswer": "['First', 'Second']",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const foo = null ?? 'default';\nconsole.log(foo);",
    "options": ["null", "'default'", "undefined", "Error"],
    "correctAnswer": "'default'",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const foo = undefined ?? 'default';\nconsole.log(foo);",
    "options": ["undefined", "'default'", "null", "Error"],
    "correctAnswer": "'default'",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const foo = 0 ?? 'default';\nconsole.log(foo);",
    "options": ["0", "'default'", "undefined", "null"],
    "correctAnswer": "0",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const obj = { a: { b: 2 } };\nconst value = obj?.a?.b;\nconsole.log(value);",
    "options": ["2", "undefined", "null", "Error"],
    "correctAnswer": "2",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const obj = { a: { b: 2 } };\nconst value = obj?.a?.c;\nconsole.log(value);",
    "options": ["undefined", "2", "null", "Error"],
    "correctAnswer": "undefined",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "async function fetchData() {  return 'Data fetched';}\nfetchData().then(result => console.log(result));",
    "options": ["Data fetched", "undefined", "Promise", "Error"],
    "correctAnswer": "Data fetched",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "async function fetchData() {  return 'Data fetched';}\nconst result = fetchData();\nconsole.log(result);",
    "options": ["Promise", "Data fetched", "undefined", "Error"],
    "correctAnswer": "Promise",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "async function fetchData() {  return 'Data fetched';}\nasync function getData() {  const result = await fetchData();  console.log(result);}\ngetData();",
    "options": ["Data fetched", "undefined", "Promise", "Error"],
    "correctAnswer": "Data fetched",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "async function fetchData() {  throw new Error('Fetch error');}\nfetchData().catch(error => console.log(error.message));",
    "options": ["Fetch error", "undefined", "Promise", "Error"],
    "correctAnswer": "Fetch error",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "async function fetchData() {  return 'Data fetched';}\nasync function getData() {  try {    const result = await fetchData();    console.log(result);  } catch (error) {    console.log(error.message);  }}\ngetData();",
    "options": ["Data fetched", "undefined", "Promise", "Error"],
    "correctAnswer": "Data fetched",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "try {  throw new Error('Something went wrong');} catch (error) {  console.log(error.message);}",
    "options": ["Something went wrong", "undefined", "Error", "null"],
    "correctAnswer": "Something went wrong",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "try {  console.log('Try block');} catch (error) {  console.log('Catch block');} finally {  console.log('Finally block');}",
    "options": [
      "Try block\nFinally block",
      "Try block\nCatch block\nFinally block",
      "Catch block\nFinally block",
      "Finally block"
    ],
    "correctAnswer": "Try block\nFinally block",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "try {  throw new Error('Something went wrong');} catch (error) {  console.log('Catch block');} finally {  console.log('Finally block');}",
    "options": [
      "Catch block\nFinally block",
      "Something went wrong\nFinally block",
      "Finally block",
      "Catch block"
    ],
    "correctAnswer": "Catch block\nFinally block",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "try {  throw new Error('Something went wrong');} catch (error) {  console.log(error.message);}\nconsole.log('After try-catch');",
    "options": [
      "Something went wrong\nAfter try-catch",
      "After try-catch\nSomething went wrong",
      "Error\nAfter try-catch",
      "After try-catch"
    ],
    "correctAnswer": "Something went wrong\nAfter try-catch",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "try {  console.log('Try block');} catch (error) {  console.log('Catch block');}\nconsole.log('After try-catch');",
    "options": [
      "Try block\nAfter try-catch",
      "Catch block\nAfter try-catch",
      "After try-catch",
      "Try block"
    ],
    "correctAnswer": "Try block\nAfter try-catch",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const name = 'John';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting);",
    "options": ["Hello, John!", "Hello, ${name}!", "Hello, John", "Hello, ${name}!"],
    "correctAnswer": "Hello, John!",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const a = 5;\nconst b = 10;\nconst result = `The sum is ${a + b}`;\nconsole.log(result);",
    "options": ["The sum is 15", "The sum is 5 + 10", "The sum is ${a + b}", "The sum is 510"],
    "correctAnswer": "The sum is 15",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const name = 'Alice';\nconst age = 25;\nconst info = 'Name: ' + name + ', Age: ' + age;\nconsole.log(info);",
    "options": [
      "Name: Alice, Age: 25",
      "Name: Alice Age: 25",
      "Name: ${name}, Age: ${age}",
      "Name: Alice, Age: ${age}"
    ],
    "correctAnswer": "Name: Alice, Age: 25",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const firstName = 'Jane';\nconst lastName = 'Doe';\nconst fullName = `${firstName} ${lastName}`;\nconsole.log(fullName);",
    "options": ["Jane Doe", "JaneDoe", "${firstName} ${lastName}", "Jane ${lastName}"],
    "correctAnswer": "Jane Doe",
    "tag": "JavaScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "const city = 'New York';\nconst message = 'Welcome to ' + city + '!';\nconsole.log(message);",
    "options": [
      "Welcome to New York!",
      "Welcome to ${city}!",
      "Welcome to New York",
      "Welcome to ' + city + '"
    ],
    "correctAnswer": "Welcome to New York!",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `let` keyword in JavaScript?",
    "options": [
      "To declare a block-scoped variable",
      "To declare a function-scoped variable",
      "To declare a constant variable",
      "To declare a global variable"
    ],
    "correctAnswer": "To declare a block-scoped variable",
    "tag": "JavaScript"
  },
  {
    "question": "What is the difference between `==` and `===` in JavaScript?",
    "options": [
      "`==` checks for value equality, while `===` checks for both value and type equality",
      "`==` checks for both value and type equality, while `===` checks for value equality",
      "`==` is used for comparing strings, while `===` is used for comparing numbers",
      "`==` is used for comparing objects, while `===` is used for comparing arrays"
    ],
    "correctAnswer": "`==` checks for value equality, while `===` checks for both value and type equality",
    "tag": "JavaScript"
  },
  {
    "question": "What is a closure in JavaScript?",
    "options": [
      "A function that has access to its own scope, the scope of the outer function, and the global scope",
      "A function that is executed immediately after it is defined",
      "A function that is used to create objects",
      "A function that is used to handle asynchronous operations"
    ],
    "correctAnswer": "A function that has access to its own scope, the scope of the outer function, and the global scope",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `const` keyword in JavaScript?",
    "options": [
      "To declare a block-scoped constant variable",
      "To declare a function-scoped constant variable",
      "To declare a global constant variable",
      "To declare a variable that can be reassigned"
    ],
    "correctAnswer": "To declare a block-scoped constant variable",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `this` keyword in JavaScript?",
    "options": [
      "To refer to the current object",
      "To refer to the global object",
      "To refer to the parent object",
      "To refer to the previous object"
    ],
    "correctAnswer": "To refer to the current object",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `Array.prototype.map` method in JavaScript?",
    "options": [
      "To create a new array with the results of calling a provided function on every element in the calling array",
      "To create a new array with all elements that pass the test implemented by the provided function",
      "To execute a provided function once for each array element",
      "To reduce the array to a single value"
    ],
    "correctAnswer": "To create a new array with the results of calling a provided function on every element in the calling array",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `Array.prototype.filter` method in JavaScript?",
    "options": [
      "To create a new array with all elements that pass the test implemented by the provided function",
      "To create a new array with the results of calling a provided function on every element in the calling array",
      "To execute a provided function once for each array element",
      "To reduce the array to a single value"
    ],
    "correctAnswer": "To create a new array with all elements that pass the test implemented by the provided function",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `Array.prototype.reduce` method in JavaScript?",
    "options": [
      "To reduce the array to a single value",
      "To create a new array with the results of calling a provided function on every element in the calling array",
      "To create a new array with all elements that pass the test implemented by the provided function",
      "To execute a provided function once for each array element"
    ],
    "correctAnswer": "To reduce the array to a single value",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `Promise` object in JavaScript?",
    "options": [
      "To represent the eventual completion (or failure) of an asynchronous operation and its resulting value",
      "To handle synchronous operations",
      "To create new objects",
      "To handle exceptions"
    ],
    "correctAnswer": "To represent the eventual completion (or failure) of an asynchronous operation and its resulting value",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `async` keyword in JavaScript?",
    "options": [
      "To define an asynchronous function that returns a `Promise`",
      "To define a synchronous function",
      "To handle exceptions",
      "To create new objects"
    ],
    "correctAnswer": "To define an asynchronous function that returns a `Promise`",
    "tag": "JavaScript"
  },
  {
    "question": "What is the primary difference between a regular function and an arrow function in JavaScript?",
    "options": [
      "Arrow functions do not have their own `this` context",
      "Arrow functions cannot accept parameters",
      "Arrow functions are not hoisted",
      "Arrow functions cannot return values"
    ],
    "correctAnswer": "Arrow functions do not have their own `this` context",
    "tag": "JavaScript"
  },
  {
    "question": "How do you define an arrow function in JavaScript?",
    "options": [
      "const myFunction = () => {}",
      "function myFunction() {}",
      "const myFunction = function() {}",
      "myFunction() => {}"
    ],
    "correctAnswer": "const myFunction = () => {}",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `this` keyword in JavaScript?",
    "options": [
      "To refer to the current object",
      "To refer to the global object",
      "To refer to the parent object",
      "To refer to the previous object"
    ],
    "correctAnswer": "To refer to the current object",
    "tag": "JavaScript"
  },
  {
    "question": "How does the `this` keyword behave differently in arrow functions compared to regular functions?",
    "options": [
      "Arrow functions inherit `this` from the enclosing scope",
      "Arrow functions have their own `this` context",
      "Arrow functions do not support the `this` keyword",
      "Arrow functions bind `this` to the global object"
    ],
    "correctAnswer": "Arrow functions inherit `this` from the enclosing scope",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `class` keyword in JavaScript?",
    "options": [
      "To define a blueprint for creating objects",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To define a blueprint for creating objects",
    "tag": "JavaScript"
  },
  {
    "question": "How do you define a class in JavaScript?",
    "options": [
      "class MyClass {}",
      "function MyClass() {}",
      "const MyClass = () => {}",
      "MyClass() => {}"
    ],
    "correctAnswer": "class MyClass {}",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `constructor` method in a JavaScript class?",
    "options": [
      "To initialize object properties",
      "To define static methods",
      "To handle exceptions",
      "To create a new array"
    ],
    "correctAnswer": "To initialize object properties",
    "tag": "JavaScript"
  },
  {
    "question": "How do you create an instance of a class in JavaScript?",
    "options": [
      "const obj = new MyClass()",
      "const obj = MyClass()",
      "const obj = create MyClass()",
      "const obj = MyClass.create()"
    ],
    "correctAnswer": "const obj = new MyClass()",
    "tag": "JavaScript"
  },
  {
    "question": "What is the purpose of the `super` keyword in JavaScript classes?",
    "options": [
      "To call the constructor of the parent class",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To call the constructor of the parent class",
    "tag": "JavaScript"
  },
  {
    "question": "How do you define a method in a JavaScript class?",
    "options": [
      "class MyClass { myMethod() {} }",
      "class MyClass { const myMethod = () => {} }",
      "class MyClass { function myMethod() {} }",
      "class MyClass { myMethod: function() {} }"
    ],
    "correctAnswer": "class MyClass { myMethod() {} }",
    "tag": "JavaScript"
  },
  {
    "question": "What is the primary purpose of TypeScript?",
    "options": [
      "To add static typing to JavaScript",
      "To create server-side applications",
      "To manage databases",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To add static typing to JavaScript",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define an interface in TypeScript?",
    "options": [
      "interface MyInterface { name: string; age: number; }",
      "class MyInterface { name: string; age: number; }",
      "type MyInterface = { name: string; age: number; }",
      "function MyInterface() { name: string; age: number; }"
    ],
    "correctAnswer": "interface MyInterface { name: string; age: number; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `readonly` modifier in TypeScript?",
    "options": [
      "To make a property immutable",
      "To define a private property",
      "To define a protected property",
      "To define a static property"
    ],
    "correctAnswer": "To make a property immutable",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a tuple type in TypeScript?",
    "options": [
      "let tuple: [string, number];",
      "let tuple: (string, number);",
      "let tuple: {string, number};",
      "let tuple: [string | number];"
    ],
    "correctAnswer": "let tuple: [string, number];",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `unknown` type in TypeScript?",
    "options": [
      "To represent a value that could be of any type",
      "To represent a value that is always null",
      "To represent a value that is always undefined",
      "To represent a value that is always a string"
    ],
    "correctAnswer": "To represent a value that could be of any type",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a function with a return type in TypeScript?",
    "options": [
      "function myFunction(): string { return 'Hello'; }",
      "function myFunction: string { return 'Hello'; }",
      "function myFunction() { return 'Hello'; }: string",
      "function myFunction() -> string { return 'Hello'; }"
    ],
    "correctAnswer": "function myFunction(): string { return 'Hello'; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `never` type in TypeScript?",
    "options": [
      "To represent a value that never occurs",
      "To represent a value that is always null",
      "To represent a value that is always undefined",
      "To represent a value that is always a string"
    ],
    "correctAnswer": "To represent a value that never occurs",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define an optional property in an interface in TypeScript?",
    "options": [
      "interface MyInterface { name?: string; }",
      "interface MyInterface { name: string | undefined; }",
      "interface MyInterface { name: string | null; }",
      "interface MyInterface { name: string | void; }"
    ],
    "correctAnswer": "interface MyInterface { name?: string; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `as` keyword in TypeScript?",
    "options": [
      "To perform type assertions",
      "To define a private property",
      "To define a protected property",
      "To define a static property"
    ],
    "correctAnswer": "To perform type assertions",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a generic function in TypeScript?",
    "options": [
      "function myFunction<T>(arg: T): T { return arg; }",
      "function myFunction(arg: T): T { return arg; }",
      "function myFunction<T>(arg: T) -> T { return arg; }",
      "function myFunction(arg: T) -> T { return arg; }"
    ],
    "correctAnswer": "function myFunction<T>(arg: T): T { return arg; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `enum` keyword in TypeScript?",
    "options": [
      "To define a set of named constants",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To define a set of named constants",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a type alias in TypeScript?",
    "options": [
      "type MyType = string | number;",
      "interface MyType { name: string; age: number; }",
      "class MyType { name: string; age: number; }",
      "function MyType() { name: string; age: number; }"
    ],
    "correctAnswer": "type MyType = string | number;",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `abstract` keyword in TypeScript?",
    "options": [
      "To define a class that cannot be instantiated directly",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To define a class that cannot be instantiated directly",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a union type in TypeScript?",
    "options": [
      "let value: string | number;",
      "let value: (string, number);",
      "let value: {string, number};",
      "let value: [string, number];"
    ],
    "correctAnswer": "let value: string | number;",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `interface` keyword in TypeScript?",
    "options": [
      "To define a contract for objects",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To define a contract for objects",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a generic interface in TypeScript?",
    "options": [
      "interface MyInterface<T> { value: T; }",
      "interface MyInterface { value: T; }",
      "interface MyInterface<T> { value: string; }",
      "interface MyInterface { value: string | number; }"
    ],
    "correctAnswer": "interface MyInterface<T> { value: T; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `extends` keyword in TypeScript?",
    "options": [
      "To create a subclass that inherits properties and methods from a parent class",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To create a subclass that inherits properties and methods from a parent class",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a function that accepts a generic parameter in TypeScript?",
    "options": [
      "function myFunction<T>(arg: T): T { return arg; }",
      "function myFunction(arg: T): T { return arg; }",
      "function myFunction<T>(arg: T) -> T { return arg; }",
      "function myFunction(arg: T) -> T { return arg; }"
    ],
    "correctAnswer": "function myFunction<T>(arg: T): T { return arg; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `implements` keyword in TypeScript?",
    "options": [
      "To ensure that a class adheres to a specific interface",
      "To declare a block-scoped variable",
      "To create a new array",
      "To handle asynchronous operations"
    ],
    "correctAnswer": "To ensure that a class adheres to a specific interface",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a class that implements an interface in TypeScript?",
    "options": [
      "class MyClass implements MyInterface { value: string; }",
      "class MyClass extends MyInterface { value: string; }",
      "class MyClass implements { value: string; }",
      "class MyClass extends { value: string; }"
    ],
    "correctAnswer": "class MyClass implements MyInterface { value: string; }",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "let value: string | number;\nvalue = 'Hello';\nconsole.log(value);",
    "options": ["Hello", "undefined", "Error", "null"],
    "correctAnswer": "Hello",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "interface Person {  name: string;  age?: number;}\nconst person: Person = { name: 'John' };\nconsole.log(person.age);",
    "options": ["undefined", "0", "Error", "null"],
    "correctAnswer": "undefined",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "class Animal {  constructor(public name: string) {}}\nconst dog = new Animal('Dog');\nconsole.log(dog.name);",
    "options": ["undefined", "Error", "Dog", "null"],
    "correctAnswer": "Dog",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "function add(a: number, b: number): number {  return a + b;}\nconsole.log(add(5, 10));",
    "options": ["undefined", "15", "Error", "510"],
    "correctAnswer": "15",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "type StringOrNumber = string | number;\nlet value: StringOrNumber = 42;\nconsole.log(value);",
    "options": ["undefined", "42", "Error", "null"],
    "correctAnswer": "42",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "enum Color {  Red = 'RED',  Green = 'GREEN',  Blue = 'BLUE'}\nconsole.log(Color.Green);",
    "options": ["Red", "Error", "GREEN", "undefined"],
    "correctAnswer": "GREEN",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "interface User {  id: number;  name: string;}\nconst user: User = { id: 1, name: 'Alice' };\nconsole.log(user.id);",
    "options": ["1", "undefined", "Error", "null"],
    "correctAnswer": "1",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "function greet(name: string): string {  return `Hello, ${name}!`;}\nconsole.log(greet('Bob'));",
    "options": ["undefined", "Error", "Hello, Bob!", "Hello, !"],
    "correctAnswer": "Hello, Bob!",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "let value: unknown = 'Hello';\nif (typeof value === 'string') {  console.log(value.toUpperCase());}",
    "options": ["HELLO", "undefined", "Error", "hello"],
    "correctAnswer": "HELLO",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of the following code snippet?",
    "codeSnippet": "type Point = { x: number, y: number };\nconst point: Point = { x: 10, y: 20 };\nconsole.log(point.x);",
    "options": ["10", "undefined", "Error", "20"],
    "correctAnswer": "10",
    "tag": "TypeScript"
  },
  {
    "question": "What is the default type assigned to a variable if no type is explicitly specified and noImplicitAny is set to false?",
    "options": ["string", "number", "any", "undefined"],
    "correctAnswer": "any",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `strictNullChecks` compiler option in TypeScript?",
    "options": [
      "To enable type inference",
      "To ensure that `null` and `undefined` are not assignable to other types unless explicitly allowed",
      "To allow implicit `any` types",
      "To allow the use of `this` in functions"
    ],
    "correctAnswer": "To ensure that `null` and `undefined` are not assignable to other types unless explicitly allowed",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define an enum type in TypeScript?",
    "options": [
      "interface Color { Red: string; Green: string; Blue: string; }",
      "enum Color { Red, Green, Blue }",
      "type Color = { Red, Green, Blue }",
      "class Color { Red: string; Green: string; Blue: string; }"
    ],
    "correctAnswer": "enum Color { Red, Green, Blue }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `private` access modifier in TypeScript?",
    "options": [
      "To allow access to a class member from any class",
      "To allow access to a class member from derived classes",
      "To restrict access to a class member to within the class itself",
      "To allow access to a class member from within the same module"
    ],
    "correctAnswer": "To restrict access to a class member to within the class itself",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a generic function in TypeScript?",
    "options": [
      "function myFunction(arg: T): T { return arg; }",
      "function myFunction<T>(arg: T) -> T { return arg; }",
      "function myFunction(arg: T) -> T { return arg; }",
      "function myFunction<T>(arg: T): T { return arg; }"
    ],
    "correctAnswer": "function myFunction<T>(arg: T): T { return arg; }",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `noImplicitAny` compiler option in TypeScript?",
    "options": [
      "To raise an error when a variable is implicitly assigned the `any` type",
      "To allow implicit `any` types",
      "To enable type inference",
      "To allow the use of `this` in functions"
    ],
    "correctAnswer": "To raise an error when a variable is implicitly assigned the `any` type",
    "tag": "TypeScript"
  },
  {
    "question": "How do you explicitly assign a type to a variable in TypeScript?",
    "options": [
      "let value = 'Hello';",
      "let value: string = 'Hello';",
      "let value: any = 'Hello';",
      "let value: unknown = 'Hello';"
    ],
    "correctAnswer": "let value: string = 'Hello';",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `protected` access modifier in TypeScript?",
    "options": [
      "To allow access to a class member from any class",
      "To allow access to a class member from within the class and derived classes",
      "To restrict access to a class member to within the class itself",
      "To allow access to a class member from within the same module"
    ],
    "correctAnswer": "To allow access to a class member from within the class and derived classes",
    "tag": "TypeScript"
  },
  {
    "question": "How do you define a simple type alias in TypeScript?",
    "options": [
      "type MyType = string | number;",
      "interface MyType { name: string; age: number; }",
      "class MyType { name: string; age: number; }",
      "function MyType() { name: string; age: number; }"
    ],
    "correctAnswer": "type MyType = string | number;",
    "tag": "TypeScript"
  },
  {
    "question": "What is the purpose of the `readonly` modifier in TypeScript?",
    "options": [
      "To define a private property",
      "To define a protected property",
      "To make a property immutable",
      "To define a static property"
    ],
    "correctAnswer": "To make a property immutable",
    "tag": "TypeScript"
  },
  {
    "question": "Select the correct statement, when setting the value for a tuple",
    "codeSnippet": "let testTuple: [string, number]; testTuple = ['Hello', 10];",
    "options": [
      "Will throw runtime error",
      "Will throw compile time error",
      "will set the tuple",
      "will not do anything"
    ],
    "correctAnswer": "will set the tuple",
    "tag": "TypeScript"
  },
  {
    "question": "Select the correct statement, when setting the value for a tuple",
    "codeSnippet": "let testTuple: [string, number]; testTuple = ['Hello', '10'];",
    "options": [
      "Will throw runtime error",
      "Will throw compile time error",
      "will set the tuple",
      "will not do anything"
    ],
    "correctAnswer": "Will throw compile time error",
    "tag": "TypeScript"
  },
  {
    "question": "Select the correct statement, when setting the value for a tuple",
    "codeSnippet": "let testTuple: [string, number]; testTuple = ['Hello', !1];",
    "options": [
      "Will throw runtime error",
      "Will throw compile time error",
      "will set the tuple",
      "will not do anything"
    ],
    "correctAnswer": "Will throw compile time error",
    "tag": "TypeScript"
  },
  {
    "question": "Select the INCORRECT statement, when setting the value for a tuple, which of the options is not acceptable?",
    "codeSnippet": "let testTuple: [string, ...number[]]",
    "options": [
      "testTuple = [\"Ben\", 10]",
      "testTuple = [\"Ben\", 10, 20]",
      "testTuple = [\"Ben\", 10, true]",
      "testTuple = [\"Ben\", 10, 20, 30]"
    ],
    "correctAnswer": "testTuple = [\"Ben\", 10, true]",
    "tag": "TypeScript"
  },
  {
    "question": "Select the correct statement, when setting the value for a tuple",
    "codeSnippet": "let testTuple: [string, ...number[]]; testTuple = ['Hello', 10, 20, 30];",
    "options": [
      "Will throw runtime error",
      "Will throw compile time error",
      "will set the tuple",
      "will not do anything"
    ],
    "correctAnswer": "will set the tuple",
    "tag": "TypeScript"
  },
  {
    "question": "As per the below code snippet, what will be the output?",
    "codeSnippet": "let testTuple: [string, ...number[]]; testTuple = ['Hello', 10, 20, 30]; console.log(testTuple);",
    "options": [
      "['Hello', 10, 20, 30]",
      "['Hello', 10]",
      "['Hello', 10, 20]",
      "['Hello', 10, 20, 30, 40]"
    ],
    "correctAnswer": "['Hello', 10, 20, 30]",
    "tag": "TypeScript"
  },
  {
    "question": "As per the below code snippet, all the assingments to generic type will work?",
    "codeSnippet": "function identity<T>(arg: T): T {   return arg;} const num = identity<number>(42);\nconst str = identity<string>('Hello');\nconst str = identity<boolean>(true);",
    "options": ["Yes", "No"],
    "correctAnswer": "Yes",
    "tag": "TypeScript"
  },
  {
    "question": "As per the below code snippet, all the assingments to generic type will work?",
    "codeSnippet": "function identity<T>(arg: T): T {return arg;}const num = identity<number>(42);const str = identity<string>('Hello');const str = identity<string>(true);",
    "options": ["Yes", "No"],
    "correctAnswer": "Yes",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of below code snippet?",
    "codeSnippet": "type Status = \"Pending\" | \"Working\" | \"Complete\"; function doSomeAction(status: Status) { switch (status) {  case \"Pending\":   console.log(status);   break; case \"Working\":   console.log(status);   break;  default:   console.log(status); }} doSomeAction(\"Pending\");",
    "options": ["Pending", "Working", "Complete"],
    "correctAnswer": "Pending",
    "tag": "TypeScript"
  },
  {
    "question": "What will be the output of below code snippet?",
    "codeSnippet": "type Status = \"Pending\" | \"Working\" | \"Complete\"; function doSomeAction(status: Status) {   switch (status) {  case \"Pending\":   console.log(status);   break; case \"Working\":   console.log(status);   break;  default:   neverReached(status); }} function neverReached(never: never) {} doSomeAction(\"Pending\");",
    "options": ["Pending", "Working", "Complete", "Throws error"],
    "correctAnswer": "Pending",
    "tag": "TypeScript"
  },
  {
    "question": "What is the type of the invalid variable in the function below?",
    "codeSnippet": "function outputMessage(message: string) {if (typeof message === \"string\") {console.log(message);} else {let invalid = message;console.error(invalid);}}",
    "options": ["string", "any", "unknown", "never"],
    "correctAnswer": "never",
    "tag": "TypeScript"
  },
  {
    "question": "What is the return type in the function below?",
    "codeSnippet": "function logMessage(message: string) {return console.log(message);}",
    "options": ["void", "string", "any", "never"],
    "correctAnswer": "void",
    "tag": "TypeScript"
  },
  {
    "question": "We have a function below that takes in a varying number of message parameters and outputs them to the console. How can we strongly-type the messages rest parameter so that only string types can be passed?",
    "codeSnippet": "function outputMessages(...messages) {messages.forEach(message => console.log(message));}",
    "options": [
      "...messages: string",
      "...messages: string[] | string",
      "...messages: string[]",
      "...messages: any"
    ],
    "correctAnswer": "...messages: string[]",
    "tag": "TypeScript"
  },
  {
    "question": "We have a variable that will hold a two-dimensional point. What is most appropriate type annotation for this?",
    "options": [
      "let point: { x: number, y: number }",
      "let point: [number, number]",
      "let point: number[]",
      "let point: { x: number }"
    ],
    "correctAnswer": "let point: [number, number]",
    "tag": "TypeScript"
  },
  {
    "question": "Is the type annotation necessary to type the amount variable to number in the declaration below?",
    "codeSnippet": "let amount: number = 10;",
    "options": ["Yes", "No"],
    "correctAnswer": "No",
    "tag": "TypeScript"
  },
  {
    "question": "Is the type annotation necessary to type the message parameter to string in the declaration below?",
    "codeSnippet": "function logMessage(message: string) {return console.log(message);}",
    "options": ["Yes", "No"],
    "correctAnswer": "Yes",
    "tag": "TypeScript"
  },
  {
    "question": "What is the type of the message parameter in the following function?",
    "codeSnippet": "function logMessage(message) {return console.log(message);}",
    "options": ["string", "any", "unknown", "never"],
    "correctAnswer": "any",
    "tag": "TypeScript"
  },
  {
    "question": "We need to create a type to represent a numeric level that can hold values between 1 and 5. What type can we use to best represent this?",
    "options": [
      "type Level = number",
      "type Level = 1 | 2 | 3 | 4 | 5",
      "type Level = 1..5",
      "interface Level = 1 | 2 | 3 | 4 | 5"
    ],
    "correctAnswer": "type Level = 1 | 2 | 3 | 4 | 5",
    "tag": "TypeScript"
  },
  {
    "question": "Will a type error occur on any of the level assignments below:",
    "codeSnippet": "enum Status {Open,InProgress,Complete}let level: Status;level = 4;level = \"4\";",
    "options": [
      "Yes, both assignments will generate type errors",
      "No, both assignments will not generate any type errors",
      "Only, the second assignment will generate a type error"
    ],
    "correctAnswer": "Yes, both assignments will generate type errors",
    "tag": "TypeScript"
  },
  {
    "question": "Will a type error occur in below class definition, if strict mode is on?",
    "codeSnippet": "class Product { name: string; price: number; }",
    "options": ["Yes", "No"],
    "correctAnswer": "Yes",
    "tag": "TypeScript"
  },
  {
    "question": "Will a type error occur in below class definition, if strict mode is on?",
    "codeSnippet": "class Product { name?: string; price?: number; }",
    "options": ["Yes", "No"],
    "correctAnswer": "No",
    "tag": "TypeScript"
  }
]
