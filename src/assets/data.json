[
  {
    "question": "What is the purpose of the `v-for` directive in Vue.js?",
    "options": [
      "To conditionally render elements",
      "To loop through an array and render a list of elements",
      "To bind attributes to elements",
      "To handle events"
    ],
    "correctAnswer": "To loop through an array and render a list of elements"
  },
  {
    "question": "Which modifier is not supported on v-model?",
    "options": ["v-model.lazy", "v-model.string", "v-model.number", "v-model.trim"],
    "correctAnswer": "v-model.string"
  },
  {
    "question": "Which inbuilt directive is not a conditional directive?",
    "options": ["v-model", "v-if", "v-show", "v-else"],
    "correctAnswer": "v-model"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `ref`"
  },
  {
    "question": "How do you define a computed property in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `computed`"
  },
  {
    "question": "How do you watch a reactive property in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `watch`"
  },
  {
    "question": "How do you bind a class dynamically in Vue.js using the Composition API?",
    "options": ["Using `:class`", "Using `v-if`", "Using `v-for`"],
    "correctAnswer": "Using `:class`"
  },
  {
    "question": "How do you bind multiple classes conditionally in Vue.js using the Composition API?",
    "options": [
      "Using `v-bind:class`",
      "Using `:class` with an array",
      "Using `v-if`",
      "Using `v-for`"
    ],
    "correctAnswer": "Using `:class` with an array"
  },
  {
    "question": "How do you bind inline styles dynamically in Vue.js using the Composition API?",
    "options": ["Using `:style`", "Using `v-if`", "Using `v-for`"],
    "correctAnswer": "Using `:style`"
  },
  {
    "question": "How do you conditionally render an element in Vue.js using the Composition API?",
    "options": ["Using `v-show`", "Using `v-if`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-if`"
  },
  {
    "question": "How do you toggle the visibility of an element in Vue.js with the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-show`"
  },
  {
    "question": "What is the purpose of the provide() method?",
    "options": [
      "To make data locally available to a specific parent component",
      "To make data available to other components",
      "To keep methods local to a single component",
      "To make a strict interface of data shared between components"
    ],
    "correctAnswer": "To make data available to other components"
  },
  {
    "question": "How do you use `v-else` for conditional rendering in Vue.js with the Composition API?",
    "options": [
      "Using `v-if` and `v-else`",
      "Using `v-show` and `v-else`",
      "Using `v-for` and `v-else`",
      "Using `v-bind` and `v-else`"
    ],
    "correctAnswer": "Using `v-if` and `v-else`"
  },
  {
    "question": "How do you render a list of items in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for`", "Using `v-bind`"],
    "correctAnswer": "Using `v-for`"
  },
  {
    "question": "How do you render a list of items with an index in Vue.js using the Composition API?",
    "options": ["Using `v-if`", "Using `v-show`", "Using `v-for` with an index", "Using `v-bind`"],
    "correctAnswer": "Using `v-for` with an index"
  },
  {
    "question": "How do you render a list of items with a template in Vue.js using the Composition API?",
    "options": [
      "Using `v-if`",
      "Using `v-show`",
      "Using `v-for` with a template",
      "Using `v-bind`"
    ],
    "correctAnswer": "Using `v-for` with a template"
  },
  {
    "question": "How do you handle a click event in Vue.js using the Composition API?",
    "options": ["Using `@click`", "Using `v-bind:click`", "Using `v-if:click`"],
    "correctAnswer": "Using `@click`"
  },
  {
    "question": "How do you handle an input event in Vue.js using the Composition API?",
    "options": ["Using `@input`", "Using `v-bind:input`", "Using `v-if:input`"],
    "correctAnswer": "Using `@input`"
  },
  {
    "question": "How do you handle a form submit event in Vue.js using the Composition API?",
    "options": ["Using `v-on:submit`", "Using `v-bind:submit`", "Using `v-if:submit`"],
    "correctAnswer": "Using `v-on:submit`"
  },
  {
    "question": "How do you handle a click event with the `.prevent` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@click`",
      "Using `@click.prevent`",
      "Using `@click.stop`",
      "Using `@click.capture`"
    ],
    "correctAnswer": "Using `@click.prevent`"
  },
  {
    "question": "How do you handle a submit event with the `.stop` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@submit`",
      "Using `@submit.prevent`",
      "Using `@submit.stop`",
      "Using `@submit.capture`"
    ],
    "correctAnswer": "Using `@submit.stop`"
  },
  {
    "question": "How do you handle a keydown event with the `.capture` modifier in Vue.js using the Composition API?",
    "options": [
      "Using `@keydown`",
      "Using `@keydown.prevent`",
      "Using `@keydown.stop`",
      "Using `@keydown.capture`"
    ],
    "correctAnswer": "Using `@keydown.capture`"
  },
  {
    "question": "How do you bind a `textarea` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@input`",
      "Using `v-bind:value` and `@change`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@input`"
  },
  {
    "question": "How do you bind a `checkbox` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:checked` and `@input`",
      "Using `v-bind:checked` and `@change`",
      "Using `v-bind:checked` and `@click`",
      "Using `v-bind:checked` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:checked` and `@change`"
  },
  {
    "question": "How do you bind a `select` input in Vue.js using the Composition API without `v-model`?",
    "options": [
      "Using `v-bind:value` and `@input`",
      "Using `v-bind:value` and `@change`",
      "Using `v-bind:value` and `@click`",
      "Using `v-bind:value` and `@keydown`"
    ],
    "correctAnswer": "Using `v-bind:value` and `@change`"
  },
  {
    "question": "Which lifecycle hook is called before a component is mounted in Vue.js using the Composition API?",
    "options": ["onMounted", "onBeforeMount", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onBeforeMount"
  },
  {
    "question": "Which lifecycle hook is called after a component is mounted in Vue.js using the Composition API?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onMounted"
  },
  {
    "question": "To display the value from the data property 'message' inside a <p> tag with text interpolation, what is the correct syntax?",
    "options": [
      "<p>message</p>",
      "<p>## message ##</p>",
      "<p>$$ message $$</p>",
      "<p>{{ message }}</p>"
    ],
    "correctAnswer": "<p>{{ message }}</p>"
  },
  {
    "question": "Vue uses a file to initialize the root Vue instance and mount it to the DOM, what is the file's name?",
    "options": ["main.js", "settings.js", "config.js", "view.js"],
    "correctAnswer": "main.js"
  },
  {
    "question": "Which lifecycle hook is called before a component is updated in Vue.js using the Composition API?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onBeforeUpdate"
  },
  {
    "question": "In which lifecycle hook is the DOM accessible and ready for manipulation?",
    "options": ["onBeforeMount", "onMounted", "onBeforeUpdate", "onUpdated"],
    "correctAnswer": "onMounted"
  },
  {
    "question": "What is the primary difference between `watch` and `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically",
      "`watchEffect` requires a specific source to watch, while `watch` runs immediately and tracks dependencies automatically",
      "`watch` and `watchEffect` are identical in functionality",
      "`watch` is used for computed properties, while `watchEffect` is used for reactive properties"
    ],
    "correctAnswer": "`watch` requires a specific source to watch, while `watchEffect` runs immediately and tracks dependencies automatically"
  },
  {
    "question": "When should you use `watch` instead of `watchEffect` in Vue.js using the Composition API?",
    "options": [
      "When you need to watch a specific reactive property or ref",
      "When you need to track dependencies automatically",
      "When you need to run the watcher immediately",
      "When you need to watch multiple reactive properties"
    ],
    "correctAnswer": "When you need to watch a specific reactive property or ref"
  },
  {
    "question": "When should you use `watchEffect` instead of `watch` in Vue.js using the Composition API?",
    "options": [
      "When you need to track dependencies automatically and run the effect immediately",
      "When you need to watch a specific reactive property or ref",
      "When you need to run the watcher only when a specific property changes",
      "When you need to watch multiple reactive properties"
    ],
    "correctAnswer": "When you need to track dependencies automatically and run the effect immediately"
  },
  {
    "question": "How do you create a reactive reference to a DOM element in Vue 3 using the Composition API?",
    "options": ["Using `reactive`", "Using `ref`", "Using `computed`", "Using `watch`"],
    "correctAnswer": "Using `ref`"
  },
  {
    "question": "How do you focus an input element using a template ref in Vue 3?",
    "options": [
      "Using `inputRef.value.focus()` in `onMounted`",
      "Using `inputRef.value.focus()` in `onBeforeMount`",
      "Using `inputRef.value.focus()` in `onBeforeUpdate`",
      "Using `inputRef.value.focus()` in `onUpdated`"
    ],
    "correctAnswer": "Using `inputRef.value.focus()` in `onMounted`"
  },
  {
    "question": "How do you access a DOM element's properties using a template ref in Vue 3?",
    "options": [
      "Using `divRef.value.innerText` in `onMounted`",
      "Using `divRef.value.innerText` in `onBeforeMount`",
      "Using `divRef.value.innerText` in `onBeforeUpdate`",
      "Using `divRef.value.innerText` in `onUpdated`"
    ],
    "correctAnswer": "Using `divRef.value.innerText` in `onMounted`"
  },
  {
    "question": "How do you access a DOM element using in Vue 3 composition API?",
    "options": ["Using `ref`", "Using `reactive`", "Using `useTemplateRef`", "Using `computed`"],
    "correctAnswer": "Using `useTemplateRef`"
  },
  {
    "question": "How do you define props in a Vue 3 component using the Composition API?",
    "options": ["Using `defineProps`", "Using `props`", "Using `setupProps`", "Using `useProps`"],
    "correctAnswer": "Using `defineProps`"
  },
  {
    "question": "How do you pass dynamic props to a child component in Vue 3?",
    "options": ["Using `v-bind`", "Using `v-if`", "Using `v-for`", "Using `v-model`"],
    "correctAnswer": "Using `v-bind`"
  },
  {
    "question": "How do you define a boolean prop in a Vue 3 component using the Composition API?",
    "options": [
      "Using `defineProps` with `Boolean`",
      "Using `props` with `Boolean`",
      "Using `setupProps` with `Boolean`",
      "Using `useProps` with `Boolean`"
    ],
    "correctAnswer": "Using `defineProps` with `Boolean`"
  },
  {
    "question": "How do you emit and listen to custom events in Vue 3 using the Composition API?",
    "options": [
      "Using `defineEmits` and `@custom-event`",
      "Using `defineProps` and `@custom-event`",
      "Using `defineEmits` and `@click`",
      "Using `defineProps` and `@click`"
    ],
    "correctAnswer": "Using `defineEmits` and `@custom-event`"
  },
  {
    "question": "How do you define a default slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template #default>`",
      "Using `<template slot:default>`",
      "Using `<template v-slot>`",
      "Using `<template slot>`"
    ],
    "correctAnswer": "Using `<template #default>`"
  },
  {
    "question": "How do you define a named slot in Vue 3 using the Composition API?",
    "options": [
      "Using `<template v-slot:header>`",
      "Using `<template slot:header>`",
      "Using `<template v-slot>`",
      "Using `<template slot>`"
    ],
    "correctAnswer": "Using `<template v-slot:header>`"
  },
  {
    "question": "How do you conditionally render a slot in Vue 3 using the Composition API?",
    "options": [
      "Using `v-if` with `<template #default>`",
      "Using `v-show` with `<template #default>`",
      "Using `v-if` with `<template slot:default>`",
      "Using `v-show` with `<template slot:default>`"
    ],
    "correctAnswer": "Using `v-if` with `<template #default>`"
  },
  {
    "question": "How can you add a transition effect to an element in Vue?",
    "options": [
      "Using <Transition> wrapper element",
      "Using the v-transition directive",
      "Using the transition() method",
      "Vue JS doesn't support Transition"
    ],
    "correctAnswer": "Using <Transition> wrapper element"
  },
  {
    "question": "Which specific attribute is recommended to add when generating elements with v-for",
    "options": ["number", "eleentId", "key", "note"],
    "correctAnswer": "key"
  },
  {
    "question": "What attribute must be used to make the CSS rules inside the <style> tag of a component local to only that specific component?",
    "options": ["<style scoped>", "<style local>", "<style this>"],
    "correctAnswer": "<style scoped>"
  },
  {
    "question": "How to create a dynamic component in Vue JS",
    "options": ["<Slot>", "<component>", "<dynamic-component>", "<KeepAlive>"],
    "correctAnswer": "<component>"
  },
  {
    "question": "Which attribute is used with the <component> tag so that we can switch between components?",
    "options": ["dynamic", "switch", "is", "componentName"],
    "correctAnswer": "is"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template>\n <Transition>\n  <div v-show=\"someCondition\">\n   First condition\n  </div>\n  <div v-show=\"!someCondition\">\n   Other condition\n  </div>\n </Transition> \n</template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will throw runtime error `<Transition> expects exactly one child element or component`"
  },
  {
    "question": "What will be the output of below code snippet when `someCondition` is true?",
    "codeSnippet": "<template>\n <Transition>\n  <div v-if=\"someCondition\">\n   First condition\n  </div>\n  <div v-else>\n   Other condition\n  </div>\n </Transition> \n</template>",
    "options": [
      "Will display text `First condition` in view",
      "Will display text `Other condition` in view",
      "Will show compiler error `<Transition> expects exactly one child element or component`",
      "Will throw runtime error `<Transition> expects exactly one child element or component`"
    ],
    "correctAnswer": "Will display text `First condition` in view"
  },
  {
    "question": "What will be the output of below code snippet?",
    "codeSnippet": "<template>\n <div v-html=\"<ol><li>Tomatoes</li><li>Potatoes</li></ol>\"></div> \n</template>",
    "options": [
      "Will display `<ol><li>Tomatoes</li><li>Potatoes</li></ol>`",
      "Will display `1.Tomatoes\n2.Potatoes`",
      "Will show compiler error",
      "Will not show anything"
    ],
    "correctAnswer": "Will display `1.Tomatoes\n2.Potatoes`"
  }
]
